#include "../src/HEAAN.h"

#include <NTL/BasicThreadPool.h>
#include <NTL/ZZ.h>
#include <cmath>
#include <complex>
#include <vector>
#include <algorithm>

#include <fstream>

#include <iostream>
#include <opencv2/opencv.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/core/mat.hpp>
#include <string>
#include <random>

#include "../src/Ciphertext.h"
#include "../src/EvaluatorUtils.h"
#include "../src/Ring.h"
#include "../src/Scheme.h"
#include "../src/SchemeAlgo.h"
#include "../src/SecretKey.h"
#include "../src/StringUtils.h"
#include "../src/TimeUtils.h"
#include "../src/SerializationUtils.h"

// #include "polyprotect_mobio.h"

using namespace cv;
using namespace heaan;
using namespace std;
using namespace NTL;

vector<long> generate_C(long C_range, long m) {
    // Randomly generates m coefficients for the PolyProtect mapping.

    // **Inputs:**

    // C_range : integer
    //     The absolute min/max values of the coefficients range. 

    // m : int
    //     The number of coefficients to generate.

    // **Outputs:**

    // C : 1D numpy array of integers
    //     Array of m coefficients.


    vector<long> neg_range, pos_range, whole_range;

    for (long i = -1*C_range; i < 0; i++) {
        neg_range.push_back(i);
    }
    for (long i = 1; i < C_range + 1; i++) {
        neg_range.push_back(i);
    }
    for (auto i:neg_range) {
        whole_range.push_back(i);
    }
    for (auto i:pos_range) {
        whole_range.push_back(i);
    }

    shuffle(whole_range.begin(), whole_range.end(), random_device());
    
    vector<long> C(whole_range.begin(), whole_range.begin() + m);

    return C;

}

vector<long> generate_E(long m) {
    // Randomly generates m exponents for the PolyProtect mapping.

    // **Inputs:**

    // m : int
    //     The number of exponents to generate.

    // **Outputs:**

    // E : 1D numpy array of integers
    //     Array of m exponents.

    

    vector<long> E;

    for (long i = 1; i < m + 1; i++) {
        E.push_back(i);
    }

    shuffle(E.begin(), E.end(), random_device());

    return E;    

}

int main() {

    //size = 1 x 512
    vector<double> query_embeddings{
         3.1946e-04,  1.4316e-02, -9.2333e-04,  9.9044e-03,  1.1071e-01,
         1.9806e-02, -5.0708e-04, -1.1563e-02,  3.3232e-02,  6.1914e-03,
         1.8992e-02,  4.1233e-02, -3.3673e-02,  4.2004e-02, -3.4065e-02,
         6.4882e-03, -6.0030e-02, -5.5353e-02, -1.1975e-02,  6.1748e-02,
         9.6589e-04,  3.1884e-02, -5.1511e-02, -4.8032e-02, -2.2573e-02,
         5.2869e-03,  1.6504e-02,  8.1485e-03, -3.3902e-02, -5.4159e-03,
        -1.6654e-02, -8.1413e-02, -3.6902e-03,  2.2104e-02, -1.8552e-02,
         5.6949e-03,  4.4777e-02, -1.1145e-02,  4.6340e-02, -1.2731e-02,
        -7.4652e-03,  7.9765e-02,  1.4272e-02, -3.9255e-03, -1.6277e-02,
         3.4834e-02, -1.1348e-02,  1.3206e-02, -1.2242e-03, -3.0144e-02,
         3.0278e-02, -3.1782e-02, -2.1976e-02, -6.4775e-02, -5.3453e-02,
        -3.4366e-03, -5.8664e-02, -6.6061e-03, -5.8662e-02, -4.6878e-02,
         1.7968e-02,  5.5469e-03, -2.0039e-02, -3.4274e-02, -6.2470e-02,
        -2.8524e-02, -9.5864e-03,  2.0355e-02,  3.0038e-02,  3.4124e-03,
        -1.3065e-02,  2.4636e-03, -3.0718e-03, -1.7291e-02,  4.1503e-02,
        -5.1292e-02,  2.6363e-02,  1.1578e-02,  3.0169e-03,  1.6810e-02,
        -3.3432e-02,  2.3480e-02,  4.0172e-03, -1.3027e-02,  9.8447e-03,
         6.6226e-03,  4.9400e-02, -6.1055e-02, -6.7336e-02,  4.7930e-02,
         6.8909e-03, -1.8359e-02,  2.2775e-02, -1.5362e-02, -7.5412e-03,
        -1.8815e-03,  1.1701e-01,  5.7839e-02,  2.4917e-02, -3.8062e-02,
        -4.1617e-03,  1.0115e-01,  3.0584e-02,  1.4537e-02,  2.5043e-02,
        -7.8671e-02, -2.0548e-02,  8.4013e-02,  6.4170e-02, -1.9889e-02,
         1.1555e-01, -2.7439e-02,  2.9339e-02,  2.0659e-02,  8.6353e-02,
         2.8624e-03,  7.0371e-02,  2.9324e-03,  8.4899e-02, -4.4047e-02,
         4.5884e-03,  5.8821e-02, -3.0586e-04, -6.8763e-03,  4.0111e-02,
        -3.3145e-02,  1.3777e-03,  1.2433e-02, -3.8152e-02,  2.8779e-02,
        -2.0848e-02,  7.9438e-02, -1.8000e-03, -1.5808e-02, -3.3815e-02,
        -5.7539e-02,  2.2727e-02,  4.0466e-02,  1.1451e-02,  8.6894e-02,
         3.5197e-02, -1.1844e-02, -3.9204e-02,  4.8960e-02,  4.5100e-02,
        -5.7207e-02, -3.1672e-02,  1.3074e-02,  2.1340e-03, -5.3746e-02,
        -8.9312e-03, -2.5644e-02, -5.7836e-03, -1.2279e-02,  1.1445e-02,
         7.7792e-03,  1.0715e-01,  2.9261e-02, -4.0436e-02,  4.4406e-02,
         1.1770e-02,  6.6014e-03, -1.9816e-03, -7.1418e-02,  2.2997e-02,
         4.4027e-02,  4.8339e-02, -3.3554e-03, -3.1077e-02,  5.3631e-02,
         3.8582e-02,  4.0409e-02,  1.2964e-02, -9.9999e-03,  1.1474e-01,
        -1.2591e-02, -7.4141e-03, -5.9022e-02,  2.3646e-02,  8.8833e-02,
         3.4721e-02,  2.2359e-03, -8.3562e-02, -2.0073e-02, -9.2119e-03,
         5.0335e-02, -5.7053e-02,  8.3700e-03,  3.6960e-02,  6.1517e-02,
        -2.3630e-02, -7.4994e-02, -3.9365e-02, -3.7789e-02,  7.9782e-02,
        -1.5791e-02,  1.8646e-02,  7.7585e-02,  1.2813e-02,  2.4200e-02,
        -2.9159e-02, -1.0367e-01, -5.4619e-02, -1.5690e-02,  2.8762e-02,
         7.6209e-02, -6.7189e-03, -7.2978e-03,  3.2563e-02,  1.2014e-02,
        -3.4410e-02, -8.8310e-02,  8.0961e-02, -1.0443e-01,  5.3108e-02,
         2.0054e-02, -7.8695e-02,  2.4891e-02,  3.4548e-02, -1.0859e-01,
        -5.4964e-02, -5.7034e-02,  1.8338e-02, -2.2437e-02,  5.4800e-02,
         5.8549e-02,  2.1291e-02, -2.6742e-03,  9.3013e-02,  1.0926e-02,
         1.3302e-02,  5.1911e-03, -3.3951e-02,  2.7124e-02,  5.8210e-02,
        -3.0634e-02, -5.5826e-02, -1.0046e-01,  1.4925e-02,  7.6612e-02,
         4.5984e-02, -8.3086e-03,  3.4590e-02, -3.3587e-02,  3.4571e-02,
        -1.7318e-03,  6.7946e-03,  2.3019e-02, -3.6899e-02, -3.7870e-03,
         5.4095e-03,  2.6361e-02, -2.9154e-03, -5.2745e-02,  1.1797e-01,
        -2.0051e-02, -1.9654e-02,  1.2298e-02,  1.1438e-02, -4.0144e-02,
        -9.6831e-02,  6.7332e-02, -2.0158e-02, -1.8311e-02,  2.7102e-02,
         6.2025e-02,  4.1771e-02, -2.4057e-03,  3.3104e-02,  3.9002e-03,
        -6.7338e-02,  4.6523e-02, -2.1378e-02, -1.0365e-02,  1.6505e-02,
        -1.2640e-02,  6.1127e-02,  3.0728e-02, -4.3444e-03, -8.8525e-02,
         8.4482e-03,  6.7798e-02,  1.1147e-01,  2.4220e-02, -1.7983e-02,
        -6.8263e-02, -2.9747e-03,  2.3392e-02,  1.0600e-02,  5.3460e-02,
        -3.9002e-02, -6.7294e-02, -5.6929e-02,  4.3350e-03,  8.1036e-03,
         1.3950e-02, -5.5138e-02,  3.4373e-02, -4.0158e-02, -3.7856e-02,
        -2.6392e-03,  4.7603e-02, -6.4612e-02,  5.9631e-02, -5.4136e-02,
         1.1809e-02, -5.8774e-02, -3.6512e-02, -1.0882e-02,  2.1480e-02,
         4.1525e-02,  1.2604e-02,  6.7448e-03, -6.4988e-03,  2.8622e-02,
        -7.4653e-02,  6.9989e-03,  2.8686e-02, -2.2905e-02,  6.2123e-02,
         1.9438e-02,  1.0370e-01, -3.7863e-02, -2.1643e-02, -9.8416e-03,
         1.7660e-02,  1.9300e-02, -9.9197e-03,  5.5199e-03, -5.7405e-02,
        -2.8118e-02, -5.1137e-02,  4.5083e-02,  6.5105e-02, -4.2595e-03,
        -7.0263e-02,  1.9793e-02, -2.6846e-02,  3.6405e-02, -3.2393e-03,
         9.4253e-02,  3.5984e-02,  3.9591e-02,  2.3997e-02, -4.7983e-02,
         2.7134e-02, -2.8917e-02, -8.7614e-02, -3.2709e-02, -1.0696e-01,
        -6.6373e-02, -1.3607e-02,  4.4390e-02,  5.4915e-03,  3.9493e-02,
        -7.8231e-02, -2.4292e-03, -1.5169e-02, -4.4705e-02, -7.9192e-03,
         5.3030e-02, -9.2902e-03,  2.5091e-02, -4.5183e-03, -3.6469e-02,
        -6.9400e-02, -4.7218e-02, -6.5490e-02,  1.1106e-02, -3.3299e-02,
        -2.1941e-02, -3.0466e-02, -1.4528e-02, -2.6883e-02, -3.1652e-03,
        -2.9890e-02, -3.9503e-02,  4.0310e-02,  1.5597e-02,  7.7536e-02,
        -2.0338e-02, -6.0909e-02, -5.5435e-02,  9.1274e-03,  2.8295e-03,
         2.1530e-02,  1.4948e-02,  4.3478e-02,  6.0577e-02,  4.3628e-02,
        -2.2235e-02,  6.8044e-02,  1.8539e-02,  1.8253e-02, -4.2879e-02,
         9.5840e-02,  7.1565e-02, -1.6856e-02,  5.8630e-02,  7.5819e-03,
         2.1569e-02, -1.4998e-02, -1.0920e-02, -7.4900e-02,  3.5128e-02,
         4.1055e-02, -9.0625e-02, -3.7211e-03,  9.9234e-03, -3.1686e-02,
         2.3684e-02, -7.5992e-03,  3.1312e-02,  2.6860e-03, -2.1168e-02,
        -5.1231e-02, -9.8450e-03,  2.8805e-02,  1.5280e-02, -3.9778e-02,
         1.2051e-02, -3.0592e-02, -8.6315e-03, -8.7091e-02,  9.4652e-03,
         2.0318e-02, -5.9195e-02, -4.4589e-02, -3.3700e-02,  5.3901e-03,
         5.2849e-02, -9.3260e-03, -3.6745e-02,  6.5854e-02, -2.0916e-03,
        -5.3096e-02,  4.4652e-03,  5.2541e-02, -3.1714e-02,  1.2011e-02,
         2.6174e-02,  4.3884e-02, -6.4220e-03,  2.4565e-02, -6.0957e-02,
         1.3897e-02, -6.2234e-02, -4.2479e-02,  1.2465e-01, -7.9923e-02,
         2.0180e-02, -3.9039e-02, -2.1897e-02,  4.8287e-02,  1.2608e-03,
        -2.4273e-02,  4.0413e-02, -6.9116e-02,  1.4132e-02, -4.4331e-02,
         8.6349e-02, -5.3900e-02, -3.3245e-03, -8.1427e-02, -1.3970e-02,
        -5.8743e-03,  7.6996e-03,  2.3893e-02, -2.8343e-02,  1.5726e-03,
        -3.9882e-02, -6.1838e-05, -2.9210e-02, -7.5353e-02, -3.0373e-02,
         1.2662e-02,  5.4526e-02, -4.8721e-02, -6.5579e-04, -1.7839e-02,
        -4.9017e-02,  1.4411e-01, -2.6555e-02, -2.9778e-02,  1.9027e-02,
        -3.3150e-03,  2.8658e-02, -1.5656e-02, -9.8843e-03,  1.3649e-03,
         3.7422e-02,  5.4432e-02, -4.0671e-03,  8.8250e-02,  2.4207e-02,
         1.0000e-01, -5.8957e-02, -2.7789e-02,  4.4180e-02,  3.9576e-02,
         1.8114e-02,  8.6596e-02,  2.8693e-04, -8.8548e-02,  7.2972e-02,
        -2.2716e-02,  6.0052e-02, -6.8119e-02, -1.1225e-03, -7.1398e-03,
         7.3155e-02,  3.7297e-02
    };

    vector<double> reference_embeddings{
         6.4095e-02, -5.0308e-02,  5.3046e-02,  3.2531e-02, -4.0620e-02,
        -7.1048e-02, -3.3763e-02, -4.4575e-02,  2.3466e-02,  8.0879e-03,
         4.8913e-02,  4.2114e-03, -2.1896e-02, -7.5167e-05,  3.9778e-02,
         1.3662e-02, -1.4470e-02,  2.4697e-02, -3.9467e-03,  8.7585e-02,
         9.8264e-03, -4.0580e-02, -1.9726e-02,  2.1605e-02, -5.7819e-02,
        -3.0289e-02, -3.6270e-02, -5.3728e-02, -7.8304e-02,  3.8645e-02,
        -3.4090e-02,  3.4848e-03, -4.2649e-02,  5.2681e-02,  1.6603e-02,
        -2.0233e-02, -2.8023e-02,  3.9073e-02, -3.2455e-02,  7.8045e-02,
        -1.7807e-02,  4.3684e-02, -8.5871e-02, -1.5678e-02, -7.1734e-02,
         5.7584e-02,  3.4020e-02,  2.7607e-02, -8.2722e-04,  6.2679e-02,
         5.9033e-02,  3.6031e-02, -3.7607e-02,  4.8474e-02, -1.8611e-02,
        -5.4873e-02,  2.9529e-02,  2.0439e-03, -3.3071e-02,  8.9064e-02,
        -6.4381e-02, -1.6620e-02,  4.4612e-02, -1.1688e-02,  6.1842e-02,
         9.2720e-03, -1.8592e-02, -3.1458e-02,  4.0630e-02, -5.2675e-02,
         2.5458e-02,  7.8779e-02, -5.2887e-02, -3.1359e-02,  2.1381e-02,
        -5.9031e-03, -4.1213e-02, -6.5774e-03,  6.1627e-02,  4.1161e-02,
        -3.2291e-03, -5.9098e-02,  2.9466e-02, -2.3780e-02, -8.7889e-03,
         6.2059e-04,  8.2198e-02,  3.3398e-02,  1.4187e-02,  4.7934e-02,
        -4.7117e-03,  1.8494e-02, -6.0084e-02, -1.9843e-02, -4.2440e-02,
        -6.4701e-02,  4.7233e-02, -9.2518e-03, -3.7529e-02,  1.8532e-02,
         2.6801e-02, -9.8442e-04, -1.6763e-02,  3.0304e-02,  1.0202e-01,
         6.2831e-03, -2.0096e-03,  3.1258e-02,  6.2759e-03, -3.5848e-02,
         2.3704e-02, -2.6070e-03, -3.3508e-02,  1.9519e-02, -9.5013e-03,
         4.5304e-02,  4.2687e-02, -2.5532e-02, -5.2916e-02,  1.0144e-02,
        -2.3514e-02,  5.4666e-02, -3.3358e-02, -3.1558e-02,  8.6874e-02,
         5.6366e-04, -9.7128e-02, -1.9885e-02, -1.3543e-02,  2.5635e-03,
        -2.8443e-02, -3.8369e-02,  4.6302e-02, -2.7883e-02,  4.1556e-02,
         4.9042e-03, -9.2723e-02,  4.3057e-02,  1.7537e-02,  4.9390e-02,
         9.9242e-02,  7.8752e-02,  2.7095e-02,  4.9282e-02,  2.3071e-02,
         6.0792e-02, -4.2689e-02,  1.0637e-01, -2.6398e-02,  6.0546e-02,
         2.8782e-03, -3.8719e-02, -2.2922e-02,  4.7937e-03, -5.7146e-02,
        -1.0436e-02,  6.2970e-02,  9.6156e-02, -9.3265e-02, -3.6102e-02,
        -3.0052e-02, -1.0068e-02, -9.6726e-02,  4.4133e-02,  1.3941e-02,
         6.1683e-02, -5.0297e-02, -1.6352e-03, -9.8531e-03, -2.5395e-02,
         3.9233e-02, -3.8792e-02,  3.0056e-02, -1.3960e-03,  2.0048e-02,
        -2.0786e-02, -2.7156e-03, -8.5095e-02, -4.5172e-02, -1.6052e-02,
        -3.5620e-02, -8.2716e-03,  7.6797e-02, -1.0979e-02, -1.4693e-02,
         5.0507e-02,  3.6214e-02, -3.4913e-03, -9.1813e-02, -7.3929e-02,
         1.6704e-03,  2.7957e-02,  1.1407e-01,  1.1080e-02, -4.9450e-03,
        -1.6119e-02, -5.2114e-03,  7.9290e-04,  3.9445e-02, -9.7114e-03,
         3.3616e-03,  1.6655e-02, -1.3449e-02,  3.3903e-02,  5.3331e-02,
        -7.2749e-03, -1.0573e-02,  5.9964e-02,  6.1716e-03,  5.3089e-03,
        -7.8544e-02, -4.1546e-02, -2.3507e-02, -2.2559e-02,  8.5126e-03,
        -3.6833e-02,  8.1380e-02,  5.3165e-02,  6.9874e-02,  8.1669e-02,
        -1.6779e-02, -4.1534e-04, -3.9188e-03, -8.9397e-02,  7.9969e-02,
         3.2809e-02, -3.0869e-02,  5.3298e-02, -4.8305e-02,  8.4447e-02,
         4.7947e-02,  5.9177e-02, -5.6991e-02, -7.0151e-02,  7.1513e-02,
         1.7871e-02, -4.0283e-02,  4.3652e-02, -7.8921e-03, -3.2366e-02,
         2.1111e-02,  2.7786e-03,  4.4525e-02,  9.1332e-02,  4.8040e-02,
         6.6927e-02,  9.4941e-05,  5.8474e-02,  7.0122e-02, -8.1084e-02,
         3.9230e-02,  2.4883e-02,  5.7031e-02,  2.4119e-02, -1.3939e-02,
         4.1016e-03, -6.0382e-02, -6.7125e-03, -5.8414e-02,  7.7955e-02,
         1.2265e-02, -7.2950e-02,  6.4920e-03,  5.6494e-03, -7.7835e-02,
        -1.3173e-02,  2.5013e-02, -9.0767e-03, -3.3123e-02,  2.6727e-02,
        -3.6130e-02, -2.0658e-04, -1.5528e-02,  1.1590e-02, -7.3127e-02,
        -2.5564e-02, -6.2908e-02, -9.0178e-02, -6.0838e-02, -2.7051e-02,
        -7.1387e-02,  9.9635e-03, -3.2779e-02,  3.5341e-02, -7.6616e-02,
         2.1244e-02,  1.8009e-02, -8.9178e-02, -6.5377e-02, -1.3313e-02,
        -5.6730e-02,  1.2630e-02,  1.1747e-01, -3.6923e-03,  5.6469e-02,
        -4.3115e-02, -2.9634e-02, -2.2439e-02, -1.6842e-02, -6.0669e-04,
         5.3884e-02, -3.0615e-02,  7.0886e-03,  6.2230e-02, -1.9728e-02,
        -4.4226e-02, -1.3310e-02,  2.1660e-02,  3.1691e-02,  6.3954e-03,
         8.3778e-03, -1.3319e-02,  4.4436e-03, -5.7081e-03,  7.0551e-02,
        -7.5678e-02, -2.7679e-02, -3.7069e-02, -4.6792e-03, -1.4286e-02,
        -3.9427e-02,  8.6210e-02, -1.3949e-02,  8.8011e-03, -1.4648e-02,
         2.8713e-02, -4.5330e-03,  3.8041e-02,  2.1745e-02,  1.0737e-01,
        -9.9308e-03,  4.0578e-05, -3.9824e-02, -3.0691e-02,  4.6517e-02,
         2.0945e-02,  9.7354e-03,  3.8963e-02, -3.9200e-02,  6.5693e-02,
        -2.1065e-02, -4.9443e-02,  2.0434e-04, -2.5058e-02,  3.3965e-02,
        -1.1928e-02, -3.8412e-02,  6.4125e-02,  1.5308e-02, -2.8335e-02,
        -1.1549e-02,  9.3614e-03, -3.0745e-02,  2.0039e-03, -7.1344e-02,
         3.1619e-02,  1.9832e-02,  9.5156e-03, -6.3036e-02,  2.0721e-02,
         2.4793e-02,  7.9767e-02, -5.3819e-02, -1.7598e-03, -4.2824e-02,
        -2.5858e-02, -1.6094e-02,  5.7435e-02, -3.6647e-02,  2.4624e-02,
        -5.8472e-02,  6.9213e-02,  2.4378e-02,  2.2695e-02, -1.6946e-02,
        -4.2635e-02,  1.1293e-02, -8.5700e-02, -8.5621e-03,  2.7244e-02,
        -1.3618e-02, -1.3990e-02, -6.3778e-02, -7.1703e-03,  3.8064e-02,
         8.5314e-03,  8.5492e-04, -2.3774e-02, -4.3290e-02,  4.5220e-02,
         1.7215e-02,  5.8697e-02, -5.0605e-02, -1.4891e-02, -1.2335e-02,
        -4.7353e-02, -3.2571e-02, -5.5923e-02, -1.0642e-03, -1.6651e-02,
         1.8075e-02,  3.8219e-02,  5.4286e-02,  1.5386e-02, -2.2785e-02,
        -1.0538e-01,  4.8827e-02, -2.5772e-02, -6.0270e-02,  5.5432e-03,
        -4.2670e-02, -6.0603e-02, -1.8001e-02,  2.6633e-02, -1.2460e-01,
        -1.8598e-02, -8.8467e-02, -5.0142e-02,  2.9280e-02, -1.0478e-02,
         1.2180e-02, -2.7584e-03, -7.6753e-02,  3.2175e-02,  2.7022e-02,
        -2.7921e-03,  2.7440e-02, -7.1810e-02, -8.8499e-03, -8.6725e-03,
         7.2508e-02, -2.5424e-02,  8.0284e-02, -1.5872e-02, -3.5312e-02,
         1.4837e-02, -7.9734e-03,  1.6545e-02, -5.7396e-02,  2.2123e-02,
        -7.7482e-02, -1.9376e-03,  7.9649e-02,  5.2637e-02,  3.9933e-02,
        -9.9716e-03,  4.9688e-02, -6.9344e-02, -4.0752e-02, -4.1673e-02,
        -6.8757e-02,  1.3513e-03,  8.3328e-02,  5.9818e-02,  1.4875e-02,
         9.7899e-03,  3.6414e-02,  3.1141e-02, -1.1135e-02,  1.2403e-02,
         3.1357e-02, -2.4596e-02,  8.0229e-02, -7.7845e-02, -6.4238e-02,
        -6.4461e-03,  3.1870e-02,  8.5650e-03, -2.3290e-02, -4.2190e-02,
         3.3843e-02, -4.1382e-02,  1.4834e-02, -3.6005e-03, -4.3946e-02,
         3.1295e-02,  9.2125e-04, -5.1667e-02, -8.2808e-03,  2.3127e-02,
         2.3617e-02,  4.6737e-02,  8.2833e-02, -1.5284e-02,  9.7098e-02,
         5.3276e-02, -2.1504e-03, -6.5116e-02,  4.8489e-02,  6.2233e-03,
        -1.0260e-01, -1.2737e-02,  7.4492e-03,  6.0023e-02,  4.6579e-02,
         4.0359e-02,  1.1818e-03,  5.8806e-02,  1.7389e-02, -9.1401e-03,
         9.0331e-03, -8.4498e-03,  3.2440e-02,  2.2031e-03,  5.0599e-02,
        -3.5354e-02, -3.0497e-02,  6.6596e-02,  2.1371e-02,  1.7552e-02,
        -1.2820e-02, -2.4653e-02
    };


    long logq = 800; ///< Ciphertext Modulus
	long logp = 30; ///< Real message will be quantized by multiplying 2^40
	long logn = 9; ///< log2(The number of slots)

    long n = 1 << logn;

    
    long C_range = 50;
    long m = 4;   
    long overlap = 0;
    long step_size = m - overlap;
    vector<long> C = generate_C(C_range, m);
    vector<long> E = generate_E(m);
    long remainder = n % step_size;
    long padding;
    if (remainder > 0) {
        padding = (step_size - remainder) % step_size;
    }
    else {
        padding = 0;
    }

    query_embeddings.resize(query_embeddings.size() + padding, 0.0);
    reference_embeddings.resize(reference_embeddings.size() + padding, 0.0);


    complex<double>* true_val = new complex<double>[4];
    double true_val_temp = 0.0;
    for (int i = 0; i < n; i += m) {
        double true_query_P = 0.0;
        for (long k = i; k < i + m; k++) {
            true_query_P += C[k%m]*pow(query_embeddings[k], E[k%m]);
        }

        double true_reference_P = 0.0;
        for (long k = i; k < i + m; k++) {
            true_reference_P += C[k%m]*pow(reference_embeddings[k], E[k%m]);
        }

        true_val_temp += pow(true_reference_P,2) - pow(true_query_P, 2);
        // if(i%32==0){
        //     cout << true_val_temp << endl;
        // }
    }
    true_val[0] = complex<double>(true_val_temp, 0.0);
    true_val[1] = complex<double>(true_val_temp, 0.0);
    true_val[2] = complex<double>(true_val_temp, 0.0);
    true_val[3] = complex<double>(true_val_temp, 0.0);
    cout << true_val_temp << endl;
    // complex<double>* decrypt_p = scheme.decrypt(secretKey, sed);

    // StringUtils::compare(true_val, decrypt_p, 4, "SED");

    
}