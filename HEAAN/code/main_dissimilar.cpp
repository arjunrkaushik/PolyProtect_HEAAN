#include "../src/HEAAN.h"

#include <NTL/BasicThreadPool.h>
#include <NTL/ZZ.h>
#include <cmath>
#include <complex>
#include <vector>
#include <algorithm>

#include <fstream>

#include <iostream>
#include <opencv2/opencv.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/core/mat.hpp>
#include <string>
#include <random>

#include "../src/Ciphertext.h"
#include "../src/EvaluatorUtils.h"
#include "../src/Ring.h"
#include "../src/Scheme.h"
#include "../src/SchemeAlgo.h"
#include "../src/SecretKey.h"
#include "../src/StringUtils.h"
#include "../src/TimeUtils.h"
#include "../src/SerializationUtils.h"

// #include "polyprotect_mobio.h"

using namespace cv;
using namespace heaan;
using namespace std;
using namespace NTL;

vector<long> generate_C(long C_range, long m) {
    // Randomly generates m coefficients for the PolyProtect mapping.

    // **Inputs:**

    // C_range : integer
    //     The absolute min/max values of the coefficients range. 

    // m : int
    //     The number of coefficients to generate.

    // **Outputs:**

    // C : 1D numpy array of integers
    //     Array of m coefficients.


    vector<long> neg_range, pos_range, whole_range;

    for (long i = -1*C_range; i < 0; i++) {
        neg_range.push_back(i);
    }
    for (long i = 1; i < C_range + 1; i++) {
        neg_range.push_back(i);
    }
    for (auto i:neg_range) {
        whole_range.push_back(i);
    }
    for (auto i:pos_range) {
        whole_range.push_back(i);
    }

    shuffle(whole_range.begin(), whole_range.end(), random_device());
    
    vector<long> C(whole_range.begin(), whole_range.begin() + m);

    return C;

}

vector<long> generate_E(long m) {
    // Randomly generates m exponents for the PolyProtect mapping.

    // **Inputs:**

    // m : int
    //     The number of exponents to generate.

    // **Outputs:**

    // E : 1D numpy array of integers
    //     Array of m exponents.

    

    vector<long> E;

    for (long i = 1; i < m + 1; i++) {
        E.push_back(i);
    }

    shuffle(E.begin(), E.end(), random_device());

    return E;    

}

int main() {

    //size = 1 x 512
    vector<double> reference_embeddings{
         3.1946e-04,  1.4316e-02, -9.2333e-04,  9.9044e-03,  1.1071e-01,
         1.9806e-02, -5.0708e-04, -1.1563e-02,  3.3232e-02,  6.1914e-03,
         1.8992e-02,  4.1233e-02, -3.3673e-02,  4.2004e-02, -3.4065e-02,
         6.4882e-03, -6.0030e-02, -5.5353e-02, -1.1975e-02,  6.1748e-02,
         9.6589e-04,  3.1884e-02, -5.1511e-02, -4.8032e-02, -2.2573e-02,
         5.2869e-03,  1.6504e-02,  8.1485e-03, -3.3902e-02, -5.4159e-03,
        -1.6654e-02, -8.1413e-02, -3.6902e-03,  2.2104e-02, -1.8552e-02,
         5.6949e-03,  4.4777e-02, -1.1145e-02,  4.6340e-02, -1.2731e-02,
        -7.4652e-03,  7.9765e-02,  1.4272e-02, -3.9255e-03, -1.6277e-02,
         3.4834e-02, -1.1348e-02,  1.3206e-02, -1.2242e-03, -3.0144e-02,
         3.0278e-02, -3.1782e-02, -2.1976e-02, -6.4775e-02, -5.3453e-02,
        -3.4366e-03, -5.8664e-02, -6.6061e-03, -5.8662e-02, -4.6878e-02,
         1.7968e-02,  5.5469e-03, -2.0039e-02, -3.4274e-02, -6.2470e-02,
        -2.8524e-02, -9.5864e-03,  2.0355e-02,  3.0038e-02,  3.4124e-03,
        -1.3065e-02,  2.4636e-03, -3.0718e-03, -1.7291e-02,  4.1503e-02,
        -5.1292e-02,  2.6363e-02,  1.1578e-02,  3.0169e-03,  1.6810e-02,
        -3.3432e-02,  2.3480e-02,  4.0172e-03, -1.3027e-02,  9.8447e-03,
         6.6226e-03,  4.9400e-02, -6.1055e-02, -6.7336e-02,  4.7930e-02,
         6.8909e-03, -1.8359e-02,  2.2775e-02, -1.5362e-02, -7.5412e-03,
        -1.8815e-03,  1.1701e-01,  5.7839e-02,  2.4917e-02, -3.8062e-02,
        -4.1617e-03,  1.0115e-01,  3.0584e-02,  1.4537e-02,  2.5043e-02,
        -7.8671e-02, -2.0548e-02,  8.4013e-02,  6.4170e-02, -1.9889e-02,
         1.1555e-01, -2.7439e-02,  2.9339e-02,  2.0659e-02,  8.6353e-02,
         2.8624e-03,  7.0371e-02,  2.9324e-03,  8.4899e-02, -4.4047e-02,
         4.5884e-03,  5.8821e-02, -3.0586e-04, -6.8763e-03,  4.0111e-02,
        -3.3145e-02,  1.3777e-03,  1.2433e-02, -3.8152e-02,  2.8779e-02,
        -2.0848e-02,  7.9438e-02, -1.8000e-03, -1.5808e-02, -3.3815e-02,
        -5.7539e-02,  2.2727e-02,  4.0466e-02,  1.1451e-02,  8.6894e-02,
         3.5197e-02, -1.1844e-02, -3.9204e-02,  4.8960e-02,  4.5100e-02,
        -5.7207e-02, -3.1672e-02,  1.3074e-02,  2.1340e-03, -5.3746e-02,
        -8.9312e-03, -2.5644e-02, -5.7836e-03, -1.2279e-02,  1.1445e-02,
         7.7792e-03,  1.0715e-01,  2.9261e-02, -4.0436e-02,  4.4406e-02,
         1.1770e-02,  6.6014e-03, -1.9816e-03, -7.1418e-02,  2.2997e-02,
         4.4027e-02,  4.8339e-02, -3.3554e-03, -3.1077e-02,  5.3631e-02,
         3.8582e-02,  4.0409e-02,  1.2964e-02, -9.9999e-03,  1.1474e-01,
        -1.2591e-02, -7.4141e-03, -5.9022e-02,  2.3646e-02,  8.8833e-02,
         3.4721e-02,  2.2359e-03, -8.3562e-02, -2.0073e-02, -9.2119e-03,
         5.0335e-02, -5.7053e-02,  8.3700e-03,  3.6960e-02,  6.1517e-02,
        -2.3630e-02, -7.4994e-02, -3.9365e-02, -3.7789e-02,  7.9782e-02,
        -1.5791e-02,  1.8646e-02,  7.7585e-02,  1.2813e-02,  2.4200e-02,
        -2.9159e-02, -1.0367e-01, -5.4619e-02, -1.5690e-02,  2.8762e-02,
         7.6209e-02, -6.7189e-03, -7.2978e-03,  3.2563e-02,  1.2014e-02,
        -3.4410e-02, -8.8310e-02,  8.0961e-02, -1.0443e-01,  5.3108e-02,
         2.0054e-02, -7.8695e-02,  2.4891e-02,  3.4548e-02, -1.0859e-01,
        -5.4964e-02, -5.7034e-02,  1.8338e-02, -2.2437e-02,  5.4800e-02,
         5.8549e-02,  2.1291e-02, -2.6742e-03,  9.3013e-02,  1.0926e-02,
         1.3302e-02,  5.1911e-03, -3.3951e-02,  2.7124e-02,  5.8210e-02,
        -3.0634e-02, -5.5826e-02, -1.0046e-01,  1.4925e-02,  7.6612e-02,
         4.5984e-02, -8.3086e-03,  3.4590e-02, -3.3587e-02,  3.4571e-02,
        -1.7318e-03,  6.7946e-03,  2.3019e-02, -3.6899e-02, -3.7870e-03,
         5.4095e-03,  2.6361e-02, -2.9154e-03, -5.2745e-02,  1.1797e-01,
        -2.0051e-02, -1.9654e-02,  1.2298e-02,  1.1438e-02, -4.0144e-02,
        -9.6831e-02,  6.7332e-02, -2.0158e-02, -1.8311e-02,  2.7102e-02,
         6.2025e-02,  4.1771e-02, -2.4057e-03,  3.3104e-02,  3.9002e-03,
        -6.7338e-02,  4.6523e-02, -2.1378e-02, -1.0365e-02,  1.6505e-02,
        -1.2640e-02,  6.1127e-02,  3.0728e-02, -4.3444e-03, -8.8525e-02,
         8.4482e-03,  6.7798e-02,  1.1147e-01,  2.4220e-02, -1.7983e-02,
        -6.8263e-02, -2.9747e-03,  2.3392e-02,  1.0600e-02,  5.3460e-02,
        -3.9002e-02, -6.7294e-02, -5.6929e-02,  4.3350e-03,  8.1036e-03,
         1.3950e-02, -5.5138e-02,  3.4373e-02, -4.0158e-02, -3.7856e-02,
        -2.6392e-03,  4.7603e-02, -6.4612e-02,  5.9631e-02, -5.4136e-02,
         1.1809e-02, -5.8774e-02, -3.6512e-02, -1.0882e-02,  2.1480e-02,
         4.1525e-02,  1.2604e-02,  6.7448e-03, -6.4988e-03,  2.8622e-02,
        -7.4653e-02,  6.9989e-03,  2.8686e-02, -2.2905e-02,  6.2123e-02,
         1.9438e-02,  1.0370e-01, -3.7863e-02, -2.1643e-02, -9.8416e-03,
         1.7660e-02,  1.9300e-02, -9.9197e-03,  5.5199e-03, -5.7405e-02,
        -2.8118e-02, -5.1137e-02,  4.5083e-02,  6.5105e-02, -4.2595e-03,
        -7.0263e-02,  1.9793e-02, -2.6846e-02,  3.6405e-02, -3.2393e-03,
         9.4253e-02,  3.5984e-02,  3.9591e-02,  2.3997e-02, -4.7983e-02,
         2.7134e-02, -2.8917e-02, -8.7614e-02, -3.2709e-02, -1.0696e-01,
        -6.6373e-02, -1.3607e-02,  4.4390e-02,  5.4915e-03,  3.9493e-02,
        -7.8231e-02, -2.4292e-03, -1.5169e-02, -4.4705e-02, -7.9192e-03,
         5.3030e-02, -9.2902e-03,  2.5091e-02, -4.5183e-03, -3.6469e-02,
        -6.9400e-02, -4.7218e-02, -6.5490e-02,  1.1106e-02, -3.3299e-02,
        -2.1941e-02, -3.0466e-02, -1.4528e-02, -2.6883e-02, -3.1652e-03,
        -2.9890e-02, -3.9503e-02,  4.0310e-02,  1.5597e-02,  7.7536e-02,
        -2.0338e-02, -6.0909e-02, -5.5435e-02,  9.1274e-03,  2.8295e-03,
         2.1530e-02,  1.4948e-02,  4.3478e-02,  6.0577e-02,  4.3628e-02,
        -2.2235e-02,  6.8044e-02,  1.8539e-02,  1.8253e-02, -4.2879e-02,
         9.5840e-02,  7.1565e-02, -1.6856e-02,  5.8630e-02,  7.5819e-03,
         2.1569e-02, -1.4998e-02, -1.0920e-02, -7.4900e-02,  3.5128e-02,
         4.1055e-02, -9.0625e-02, -3.7211e-03,  9.9234e-03, -3.1686e-02,
         2.3684e-02, -7.5992e-03,  3.1312e-02,  2.6860e-03, -2.1168e-02,
        -5.1231e-02, -9.8450e-03,  2.8805e-02,  1.5280e-02, -3.9778e-02,
         1.2051e-02, -3.0592e-02, -8.6315e-03, -8.7091e-02,  9.4652e-03,
         2.0318e-02, -5.9195e-02, -4.4589e-02, -3.3700e-02,  5.3901e-03,
         5.2849e-02, -9.3260e-03, -3.6745e-02,  6.5854e-02, -2.0916e-03,
        -5.3096e-02,  4.4652e-03,  5.2541e-02, -3.1714e-02,  1.2011e-02,
         2.6174e-02,  4.3884e-02, -6.4220e-03,  2.4565e-02, -6.0957e-02,
         1.3897e-02, -6.2234e-02, -4.2479e-02,  1.2465e-01, -7.9923e-02,
         2.0180e-02, -3.9039e-02, -2.1897e-02,  4.8287e-02,  1.2608e-03,
        -2.4273e-02,  4.0413e-02, -6.9116e-02,  1.4132e-02, -4.4331e-02,
         8.6349e-02, -5.3900e-02, -3.3245e-03, -8.1427e-02, -1.3970e-02,
        -5.8743e-03,  7.6996e-03,  2.3893e-02, -2.8343e-02,  1.5726e-03,
        -3.9882e-02, -6.1838e-05, -2.9210e-02, -7.5353e-02, -3.0373e-02,
         1.2662e-02,  5.4526e-02, -4.8721e-02, -6.5579e-04, -1.7839e-02,
        -4.9017e-02,  1.4411e-01, -2.6555e-02, -2.9778e-02,  1.9027e-02,
        -3.3150e-03,  2.8658e-02, -1.5656e-02, -9.8843e-03,  1.3649e-03,
         3.7422e-02,  5.4432e-02, -4.0671e-03,  8.8250e-02,  2.4207e-02,
         1.0000e-01, -5.8957e-02, -2.7789e-02,  4.4180e-02,  3.9576e-02,
         1.8114e-02,  8.6596e-02,  2.8693e-04, -8.8548e-02,  7.2972e-02,
        -2.2716e-02,  6.0052e-02, -6.8119e-02, -1.1225e-03, -7.1398e-03,
         7.3155e-02,  3.7297e-02
    };

    // Image 1 Complete
    // vector<double> query_embeddings{
    //      6.4095e-02, -5.0308e-02,  5.3046e-02,  3.2531e-02, -4.0620e-02,
    //     -7.1048e-02, -3.3763e-02, -4.4575e-02,  2.3466e-02,  8.0879e-03,
    //      4.8913e-02,  4.2114e-03, -2.1896e-02, -7.5167e-05,  3.9778e-02,
    //      1.3662e-02, -1.4470e-02,  2.4697e-02, -3.9467e-03,  8.7585e-02,
    //      9.8264e-03, -4.0580e-02, -1.9726e-02,  2.1605e-02, -5.7819e-02,
    //     -3.0289e-02, -3.6270e-02, -5.3728e-02, -7.8304e-02,  3.8645e-02,
    //     -3.4090e-02,  3.4848e-03, -4.2649e-02,  5.2681e-02,  1.6603e-02,
    //     -2.0233e-02, -2.8023e-02,  3.9073e-02, -3.2455e-02,  7.8045e-02,
    //     -1.7807e-02,  4.3684e-02, -8.5871e-02, -1.5678e-02, -7.1734e-02,
    //      5.7584e-02,  3.4020e-02,  2.7607e-02, -8.2722e-04,  6.2679e-02,
    //      5.9033e-02,  3.6031e-02, -3.7607e-02,  4.8474e-02, -1.8611e-02,
    //     -5.4873e-02,  2.9529e-02,  2.0439e-03, -3.3071e-02,  8.9064e-02,
    //     -6.4381e-02, -1.6620e-02,  4.4612e-02, -1.1688e-02,  6.1842e-02,
    //      9.2720e-03, -1.8592e-02, -3.1458e-02,  4.0630e-02, -5.2675e-02,
    //      2.5458e-02,  7.8779e-02, -5.2887e-02, -3.1359e-02,  2.1381e-02,
    //     -5.9031e-03, -4.1213e-02, -6.5774e-03,  6.1627e-02,  4.1161e-02,
    //     -3.2291e-03, -5.9098e-02,  2.9466e-02, -2.3780e-02, -8.7889e-03,
    //      6.2059e-04,  8.2198e-02,  3.3398e-02,  1.4187e-02,  4.7934e-02,
    //     -4.7117e-03,  1.8494e-02, -6.0084e-02, -1.9843e-02, -4.2440e-02,
    //     -6.4701e-02,  4.7233e-02, -9.2518e-03, -3.7529e-02,  1.8532e-02,
    //      2.6801e-02, -9.8442e-04, -1.6763e-02,  3.0304e-02,  1.0202e-01,
    //      6.2831e-03, -2.0096e-03,  3.1258e-02,  6.2759e-03, -3.5848e-02,
    //      2.3704e-02, -2.6070e-03, -3.3508e-02,  1.9519e-02, -9.5013e-03,
    //      4.5304e-02,  4.2687e-02, -2.5532e-02, -5.2916e-02,  1.0144e-02,
    //     -2.3514e-02,  5.4666e-02, -3.3358e-02, -3.1558e-02,  8.6874e-02,
    //      5.6366e-04, -9.7128e-02, -1.9885e-02, -1.3543e-02,  2.5635e-03,
    //     -2.8443e-02, -3.8369e-02,  4.6302e-02, -2.7883e-02,  4.1556e-02,
    //      4.9042e-03, -9.2723e-02,  4.3057e-02,  1.7537e-02,  4.9390e-02,
    //      9.9242e-02,  7.8752e-02,  2.7095e-02,  4.9282e-02,  2.3071e-02,
    //      6.0792e-02, -4.2689e-02,  1.0637e-01, -2.6398e-02,  6.0546e-02,
    //      2.8782e-03, -3.8719e-02, -2.2922e-02,  4.7937e-03, -5.7146e-02,
    //     -1.0436e-02,  6.2970e-02,  9.6156e-02, -9.3265e-02, -3.6102e-02,
    //     -3.0052e-02, -1.0068e-02, -9.6726e-02,  4.4133e-02,  1.3941e-02,
    //      6.1683e-02, -5.0297e-02, -1.6352e-03, -9.8531e-03, -2.5395e-02,
    //      3.9233e-02, -3.8792e-02,  3.0056e-02, -1.3960e-03,  2.0048e-02,
    //     -2.0786e-02, -2.7156e-03, -8.5095e-02, -4.5172e-02, -1.6052e-02,
    //     -3.5620e-02, -8.2716e-03,  7.6797e-02, -1.0979e-02, -1.4693e-02,
    //      5.0507e-02,  3.6214e-02, -3.4913e-03, -9.1813e-02, -7.3929e-02,
    //      1.6704e-03,  2.7957e-02,  1.1407e-01,  1.1080e-02, -4.9450e-03,
    //     -1.6119e-02, -5.2114e-03,  7.9290e-04,  3.9445e-02, -9.7114e-03,
    //      3.3616e-03,  1.6655e-02, -1.3449e-02,  3.3903e-02,  5.3331e-02,
    //     -7.2749e-03, -1.0573e-02,  5.9964e-02,  6.1716e-03,  5.3089e-03,
    //     -7.8544e-02, -4.1546e-02, -2.3507e-02, -2.2559e-02,  8.5126e-03,
    //     -3.6833e-02,  8.1380e-02,  5.3165e-02,  6.9874e-02,  8.1669e-02,
    //     -1.6779e-02, -4.1534e-04, -3.9188e-03, -8.9397e-02,  7.9969e-02,
    //      3.2809e-02, -3.0869e-02,  5.3298e-02, -4.8305e-02,  8.4447e-02,
    //      4.7947e-02,  5.9177e-02, -5.6991e-02, -7.0151e-02,  7.1513e-02,
    //      1.7871e-02, -4.0283e-02,  4.3652e-02, -7.8921e-03, -3.2366e-02,
    //      2.1111e-02,  2.7786e-03,  4.4525e-02,  9.1332e-02,  4.8040e-02,
    //      6.6927e-02,  9.4941e-05,  5.8474e-02,  7.0122e-02, -8.1084e-02,
    //      3.9230e-02,  2.4883e-02,  5.7031e-02,  2.4119e-02, -1.3939e-02,
    //      4.1016e-03, -6.0382e-02, -6.7125e-03, -5.8414e-02,  7.7955e-02,
    //      1.2265e-02, -7.2950e-02,  6.4920e-03,  5.6494e-03, -7.7835e-02,
    //     -1.3173e-02,  2.5013e-02, -9.0767e-03, -3.3123e-02,  2.6727e-02,
    //     -3.6130e-02, -2.0658e-04, -1.5528e-02,  1.1590e-02, -7.3127e-02,
    //     -2.5564e-02, -6.2908e-02, -9.0178e-02, -6.0838e-02, -2.7051e-02,
    //     -7.1387e-02,  9.9635e-03, -3.2779e-02,  3.5341e-02, -7.6616e-02,
    //      2.1244e-02,  1.8009e-02, -8.9178e-02, -6.5377e-02, -1.3313e-02,
    //     -5.6730e-02,  1.2630e-02,  1.1747e-01, -3.6923e-03,  5.6469e-02,
    //     -4.3115e-02, -2.9634e-02, -2.2439e-02, -1.6842e-02, -6.0669e-04,
    //      5.3884e-02, -3.0615e-02,  7.0886e-03,  6.2230e-02, -1.9728e-02,
    //     -4.4226e-02, -1.3310e-02,  2.1660e-02,  3.1691e-02,  6.3954e-03,
    //      8.3778e-03, -1.3319e-02,  4.4436e-03, -5.7081e-03,  7.0551e-02,
    //     -7.5678e-02, -2.7679e-02, -3.7069e-02, -4.6792e-03, -1.4286e-02,
    //     -3.9427e-02,  8.6210e-02, -1.3949e-02,  8.8011e-03, -1.4648e-02,
    //      2.8713e-02, -4.5330e-03,  3.8041e-02,  2.1745e-02,  1.0737e-01,
    //     -9.9308e-03,  4.0578e-05, -3.9824e-02, -3.0691e-02,  4.6517e-02,
    //      2.0945e-02,  9.7354e-03,  3.8963e-02, -3.9200e-02,  6.5693e-02,
    //     -2.1065e-02, -4.9443e-02,  2.0434e-04, -2.5058e-02,  3.3965e-02,
    //     -1.1928e-02, -3.8412e-02,  6.4125e-02,  1.5308e-02, -2.8335e-02,
    //     -1.1549e-02,  9.3614e-03, -3.0745e-02,  2.0039e-03, -7.1344e-02,
    //      3.1619e-02,  1.9832e-02,  9.5156e-03, -6.3036e-02,  2.0721e-02,
    //      2.4793e-02,  7.9767e-02, -5.3819e-02, -1.7598e-03, -4.2824e-02,
    //     -2.5858e-02, -1.6094e-02,  5.7435e-02, -3.6647e-02,  2.4624e-02,
    //     -5.8472e-02,  6.9213e-02,  2.4378e-02,  2.2695e-02, -1.6946e-02,
    //     -4.2635e-02,  1.1293e-02, -8.5700e-02, -8.5621e-03,  2.7244e-02,
    //     -1.3618e-02, -1.3990e-02, -6.3778e-02, -7.1703e-03,  3.8064e-02,
    //      8.5314e-03,  8.5492e-04, -2.3774e-02, -4.3290e-02,  4.5220e-02,
    //      1.7215e-02,  5.8697e-02, -5.0605e-02, -1.4891e-02, -1.2335e-02,
    //     -4.7353e-02, -3.2571e-02, -5.5923e-02, -1.0642e-03, -1.6651e-02,
    //      1.8075e-02,  3.8219e-02,  5.4286e-02,  1.5386e-02, -2.2785e-02,
    //     -1.0538e-01,  4.8827e-02, -2.5772e-02, -6.0270e-02,  5.5432e-03,
    //     -4.2670e-02, -6.0603e-02, -1.8001e-02,  2.6633e-02, -1.2460e-01,
    //     -1.8598e-02, -8.8467e-02, -5.0142e-02,  2.9280e-02, -1.0478e-02,
    //      1.2180e-02, -2.7584e-03, -7.6753e-02,  3.2175e-02,  2.7022e-02,
    //     -2.7921e-03,  2.7440e-02, -7.1810e-02, -8.8499e-03, -8.6725e-03,
    //      7.2508e-02, -2.5424e-02,  8.0284e-02, -1.5872e-02, -3.5312e-02,
    //      1.4837e-02, -7.9734e-03,  1.6545e-02, -5.7396e-02,  2.2123e-02,
    //     -7.7482e-02, -1.9376e-03,  7.9649e-02,  5.2637e-02,  3.9933e-02,
    //     -9.9716e-03,  4.9688e-02, -6.9344e-02, -4.0752e-02, -4.1673e-02,
    //     -6.8757e-02,  1.3513e-03,  8.3328e-02,  5.9818e-02,  1.4875e-02,
    //      9.7899e-03,  3.6414e-02,  3.1141e-02, -1.1135e-02,  1.2403e-02,
    //      3.1357e-02, -2.4596e-02,  8.0229e-02, -7.7845e-02, -6.4238e-02,
    //     -6.4461e-03,  3.1870e-02,  8.5650e-03, -2.3290e-02, -4.2190e-02,
    //      3.3843e-02, -4.1382e-02,  1.4834e-02, -3.6005e-03, -4.3946e-02,
    //      3.1295e-02,  9.2125e-04, -5.1667e-02, -8.2808e-03,  2.3127e-02,
    //      2.3617e-02,  4.6737e-02,  8.2833e-02, -1.5284e-02,  9.7098e-02,
    //      5.3276e-02, -2.1504e-03, -6.5116e-02,  4.8489e-02,  6.2233e-03,
    //     -1.0260e-01, -1.2737e-02,  7.4492e-03,  6.0023e-02,  4.6579e-02,
    //      4.0359e-02,  1.1818e-03,  5.8806e-02,  1.7389e-02, -9.1401e-03,
    //      9.0331e-03, -8.4498e-03,  3.2440e-02,  2.2031e-03,  5.0599e-02,
    //     -3.5354e-02, -3.0497e-02,  6.6596e-02,  2.1371e-02,  1.7552e-02,
    //     -1.2820e-02, -2.4653e-02
    // };

    // Image 2 Complete
    // vector<double> query_embeddings{
    //      4.1616e-02, -5.3946e-03, -1.4604e-02,  4.2819e-02, -7.6680e-03,
    //     -1.7146e-02, -2.1897e-03, -2.2470e-02, -1.5440e-02,  1.5012e-02,
    //      9.4722e-03,  5.8473e-02, -5.2304e-02, -2.1809e-02,  4.4824e-03,
    //     -2.3417e-02,  9.3824e-03,  4.3128e-02,  3.8145e-02, -1.7067e-03,
    //     -5.3376e-02, -4.5684e-03,  2.6717e-02, -5.0433e-02, -4.3016e-02,
    //     -7.9687e-02, -1.1195e-03, -5.4180e-02, -9.6162e-03,  1.1715e-02,
    //     -3.5393e-02, -2.6083e-02,  1.1923e-02, -6.6771e-03,  1.9526e-03,
    //     -3.0650e-02,  4.1409e-02,  2.5613e-02, -1.7504e-02,  5.6022e-03,
    //      1.3509e-03,  3.2639e-02, -5.9834e-02, -4.8256e-02, -9.7218e-02,
    //      1.3360e-04, -3.9580e-02,  3.5713e-02, -2.6864e-02,  2.5290e-02,
    //     -2.1373e-02,  3.7283e-02, -2.2542e-02, -2.3997e-02, -6.2316e-02,
    //     -4.2019e-02,  2.5033e-02,  8.3558e-02, -4.6894e-03,  4.9956e-02,
    //     -7.0047e-02,  4.8039e-02,  1.8165e-02,  1.3357e-02,  3.7610e-02,
    //     -1.4165e-02,  2.0672e-02, -4.8653e-02,  2.3223e-02, -4.6568e-02,
    //     -1.7036e-02,  6.0828e-02,  7.8031e-03, -1.4667e-03,  4.3904e-02,
    //     -8.1398e-02, -5.2785e-02, -4.0582e-02,  4.9083e-02,  5.3947e-02,
    //     -2.6350e-02, -7.5570e-02, -1.1480e-03, -7.2525e-03,  3.6784e-02,
    //     -3.5545e-03,  3.7836e-02,  4.9100e-02, -8.0203e-02, -5.3308e-03,
    //      2.3176e-02, -3.5910e-02, -2.2766e-02, -6.3161e-02, -5.1232e-02,
    //     -4.8665e-02,  7.3136e-02,  1.7451e-02, -6.2815e-02,  8.0280e-02,
    //      3.5268e-02, -7.8767e-03, -4.1595e-02,  2.8303e-02,  5.0847e-02,
    //     -3.6433e-02, -4.4894e-04,  2.2216e-02,  7.0678e-02, -4.8966e-02,
    //      1.0140e-01,  1.5901e-02, -7.4999e-02, -2.4497e-02,  5.4096e-04,
    //      3.9339e-02,  9.1753e-02, -3.9962e-02,  2.8975e-02,  5.8384e-02,
    //     -4.6281e-02,  3.7503e-02, -4.0901e-02, -7.6452e-03,  2.8178e-02,
    //     -1.0535e-02,  4.6202e-02, -2.8168e-02, -7.3024e-02,  3.4468e-02,
    //     -7.1716e-02, -4.6847e-02,  9.7249e-02, -2.3283e-02, -6.0570e-02,
    //      2.8825e-02, -7.2718e-02,  6.5276e-02,  7.5280e-02,  3.4808e-02,
    //      2.3910e-02,  7.0255e-02,  4.7250e-02,  1.0805e-01,  1.7344e-02,
    //      2.3058e-02, -8.4147e-02,  4.4991e-02,  3.5750e-02,  3.5056e-02,
    //      4.2169e-02,  1.2402e-02, -1.3848e-02, -4.7858e-02,  6.8403e-02,
    //      9.8967e-03,  3.4853e-02,  8.1895e-02, -8.1047e-02,  2.6495e-02,
    //      3.3646e-02,  1.0990e-03, -4.6768e-03,  5.3445e-02, -2.1892e-02,
    //      1.1343e-01, -4.0415e-02,  1.5419e-02, -7.5787e-02,  6.1555e-02,
    //      1.1258e-02, -5.5148e-02,  5.2760e-02, -2.5362e-02, -1.7455e-02,
    //     -3.9129e-02,  2.8401e-02, -7.1012e-02, -2.2265e-02,  8.6192e-03,
    //     -2.8716e-03, -7.4308e-02,  5.7577e-02,  4.8133e-03,  1.1158e-02,
    //      2.5994e-02,  1.8334e-02,  1.7719e-02, -3.4188e-02, -5.1374e-03,
    //     -4.4379e-02,  2.8059e-02,  5.2566e-02, -5.8261e-02,  5.2988e-02,
    //      1.4520e-02,  1.3535e-02,  2.8384e-02,  6.9739e-02,  1.5907e-02,
    //     -2.8078e-02, -2.6148e-02, -2.6235e-02, -5.8252e-02,  4.0072e-02,
    //      5.7191e-03, -3.6978e-02,  3.2670e-02,  1.4496e-02,  3.5277e-02,
    //     -9.1877e-02, -1.8412e-02, -9.2456e-03, -3.0907e-02, -2.4175e-02,
    //      1.6253e-02,  7.1848e-02,  1.7428e-02,  1.9778e-02,  8.3704e-02,
    //     -2.8507e-02,  2.6406e-02,  8.4272e-03, -9.4399e-02,  5.3007e-02,
    //      1.7456e-02, -3.3640e-02, -2.1129e-02, -2.5883e-02,  4.9892e-02,
    //      4.6078e-02,  7.8534e-02, -3.6236e-02, -8.7153e-02, -1.0498e-02,
    //     -1.1419e-03,  6.7492e-02,  3.0056e-02, -1.0632e-02, -6.7056e-02,
    //      3.2060e-02, -7.2862e-02,  1.0299e-02,  4.0532e-02,  4.1117e-02,
    //      4.6415e-02,  1.4880e-02, -4.6781e-03,  6.6129e-03, -8.2407e-02,
    //      5.2660e-02, -2.5310e-02,  6.9041e-02,  7.5863e-02, -1.3731e-02,
    //     -2.2110e-02, -4.7144e-02,  9.3493e-03,  3.9613e-02,  6.4992e-02,
    //      6.4110e-03,  5.0411e-02, -8.9211e-03, -1.1749e-02, -2.5198e-02,
    //     -1.3683e-02,  1.6536e-02, -1.9599e-02, -1.5661e-02, -1.8767e-02,
    //      3.4338e-03,  5.7260e-02, -1.5884e-02, -2.5713e-02, -9.6353e-02,
    //     -2.0547e-02, -6.1091e-02, -7.0702e-02,  4.8245e-02, -4.8648e-03,
    //      3.8765e-03,  6.6017e-02, -6.4062e-02,  1.1749e-03, -7.1931e-02,
    //     -2.2577e-02,  6.4101e-03, -2.1280e-02,  2.8135e-02, -3.1343e-02,
    //     -9.2282e-02, -8.2458e-02,  7.1790e-02,  4.1455e-02,  1.7103e-02,
    //     -3.1939e-02, -2.6044e-02,  3.0098e-02,  3.0924e-04,  3.5599e-02,
    //      7.1982e-02, -1.6176e-02,  1.0476e-02,  7.9138e-02, -2.8666e-02,
    //     -6.8733e-02,  1.5270e-02, -4.6940e-02, -2.8239e-02, -3.9424e-02,
    //      3.6880e-02,  1.6555e-02, -1.6358e-02, -2.1160e-02,  8.2076e-02,
    //     -4.3176e-02,  1.3765e-02, -6.6902e-02, -5.5590e-02, -3.4772e-02,
    //      7.0774e-02,  5.1168e-02, -4.1465e-02,  7.6320e-02,  2.1498e-03,
    //     -1.1492e-02,  1.8529e-02, -1.7026e-02,  2.7042e-02,  2.5781e-02,
    //      1.2420e-02,  9.8439e-03, -3.2923e-02, -2.8145e-03, -2.8657e-02,
    //      4.2122e-02, -3.2747e-03, -8.2476e-04, -2.4810e-02,  5.3634e-02,
    //      4.9061e-02, -4.5842e-02, -1.9497e-02,  1.2136e-03, -8.8497e-03,
    //     -5.6419e-02, -5.3700e-02, -1.7638e-02,  7.0041e-02, -8.5528e-03,
    //     -5.4169e-02, -1.2156e-03, -2.4820e-02,  4.3046e-02, -7.9909e-02,
    //      2.5629e-02,  4.5728e-02,  9.7881e-02, -4.3131e-02,  4.1620e-02,
    //     -1.2348e-03,  5.0465e-02, -9.5527e-02,  3.3071e-03, -4.3692e-02,
    //      3.5152e-02, -6.2657e-03,  1.1578e-02, -5.2303e-02,  6.4011e-02,
    //     -3.7694e-02,  3.5657e-03, -1.9239e-02,  6.5877e-02,  3.9472e-02,
    //     -6.3456e-02, -4.1226e-02, -4.9094e-02, -2.3422e-02,  3.0008e-02,
    //     -3.8135e-02,  3.6109e-02, -6.3920e-02,  4.1922e-02,  9.0793e-02,
    //     -9.8074e-03,  1.5342e-02,  1.6420e-02,  2.7271e-02,  5.5464e-02,
    //      4.1521e-02,  6.2926e-02, -3.2124e-02, -1.8907e-02, -1.8851e-02,
    //     -2.6415e-03,  2.3550e-02, -4.3845e-02,  5.6446e-05, -5.2398e-03,
    //      5.7256e-03,  3.5110e-02, -8.7655e-03,  3.3551e-02, -1.2139e-02,
    //     -9.7921e-02, -2.2855e-02, -3.5705e-02, -3.0264e-02,  2.5958e-02,
    //     -5.1933e-03, -4.8834e-02, -6.2599e-02,  6.3010e-02, -8.4831e-02,
    //     -4.2913e-02, -3.1358e-02,  7.0335e-02, -2.3238e-02, -2.7472e-02,
    //     -1.3680e-02,  5.8737e-03, -2.3849e-02,  3.0831e-02,  2.5223e-02,
    //      1.6387e-02,  3.0453e-02, -1.4893e-02, -1.5469e-02,  2.1059e-02,
    //      5.1038e-03,  4.4537e-02,  6.2695e-02, -2.3259e-02, -1.0012e-01,
    //     -3.4772e-02, -6.0860e-02, -1.8229e-02, -4.9070e-02, -1.6065e-02,
    //      5.0154e-03,  3.0714e-02,  7.3354e-02,  1.1718e-02, -1.4273e-02,
    //     -1.2559e-02,  1.8194e-02, -7.6059e-03, -8.9245e-02, -7.0456e-02,
    //      1.4315e-03, -3.3968e-03,  5.8639e-02,  1.2165e-02,  4.5714e-03,
    //     -3.8897e-02,  6.2490e-02,  4.4105e-02,  6.2060e-02,  4.0256e-02,
    //      5.8375e-02,  6.3782e-02,  5.9425e-02, -7.7514e-02, -3.5041e-02,
    //      2.6014e-02,  6.4451e-02,  9.6844e-03,  2.7373e-02, -4.2867e-02,
    //      5.0124e-02, -7.4500e-02,  7.9600e-02, -6.6160e-02, -1.5194e-02,
    //     -5.6034e-03,  3.9531e-02, -5.7123e-02,  2.0544e-02,  6.5337e-02,
    //      9.3236e-03,  4.5457e-02,  9.9162e-02, -1.5774e-02,  1.1027e-01,
    //      5.2034e-02, -3.0966e-02, -6.0197e-02,  4.7080e-02,  9.6226e-03,
    //     -4.6623e-02, -1.7222e-02, -8.0836e-02,  7.5442e-03,  9.2877e-02,
    //     -1.6889e-03, -7.5877e-04,  4.9151e-02, -2.8372e-02, -7.5775e-04,
    //     -2.9998e-02,  5.1087e-02,  9.3666e-03,  7.0284e-02, -2.9427e-03,
    //     -2.5581e-02, -1.1985e-02,  5.0753e-02,  8.5345e-03, -2.4024e-02,
    //     -3.5806e-02, -2.6475e-02
    // };

    // Image 3 Complete
    // vector<double> query_embeddings{
    //      0.0332,  0.0087,  0.0254, -0.0341,  0.0740,  0.0079,  0.0619, -0.0049,
    //     -0.0313,  0.0101, -0.0427,  0.0506,  0.0074,  0.0390,  0.0216, -0.0039,
    //      0.0270, -0.0699,  0.0047, -0.0166, -0.0184,  0.0496, -0.0239, -0.0338,
    //      0.0227, -0.0493, -0.0131, -0.0306,  0.0390, -0.0973, -0.0412,  0.0099,
    //      0.0131,  0.0254,  0.0070, -0.0303,  0.0300, -0.0373, -0.0482, -0.0865,
    //      0.0672, -0.0310,  0.0572, -0.0159, -0.0825, -0.0100,  0.0451,  0.0009,
    //     -0.0345, -0.0524,  0.0223, -0.0145,  0.0597, -0.0503,  0.0339, -0.0640,
    //     -0.0542,  0.0868,  0.0200,  0.0234, -0.0419,  0.0136,  0.0036, -0.0137,
    //     -0.0538, -0.0147,  0.0250,  0.0640,  0.0579, -0.0011,  0.0117, -0.0739,
    //      0.0785,  0.0508,  0.0209, -0.0151,  0.0712, -0.0132, -0.0117,  0.0269,
    //      0.0033,  0.0299, -0.0657,  0.0295, -0.0323, -0.0507,  0.0371, -0.0601,
    //     -0.0219,  0.0031,  0.0071,  0.1085,  0.0225,  0.0282, -0.0221, -0.0254,
    //     -0.0281,  0.0518, -0.0800, -0.0431, -0.0006,  0.0661,  0.0139, -0.0538,
    //     -0.0156, -0.0356,  0.0914,  0.0100, -0.0009,  0.0100,  0.0035, -0.0625,
    //     -0.0460,  0.0182, -0.0338, -0.0155,  0.0842, -0.0105,  0.0312, -0.0115,
    //     -0.0121,  0.0672,  0.0227, -0.0576, -0.0477,  0.0701,  0.1073, -0.0253,
    //      0.0672,  0.0567, -0.0267,  0.0581,  0.0116,  0.0264, -0.0882, -0.0210,
    //     -0.0176,  0.0445,  0.0329, -0.0376, -0.0164, -0.0525,  0.0419, -0.0111,
    //     -0.0091, -0.0034, -0.0717, -0.1038,  0.1416, -0.0454,  0.1012, -0.0422,
    //     -0.0474,  0.0074,  0.0066, -0.0326, -0.0285, -0.0483, -0.0510,  0.0878,
    //     -0.0170, -0.0570,  0.0686, -0.0050,  0.0077,  0.0061, -0.0219,  0.0667,
    //     -0.0356,  0.0495,  0.0515, -0.0086, -0.0570, -0.0239, -0.0259, -0.0203,
    //      0.0515,  0.0539,  0.0715,  0.0562, -0.0242,  0.0526, -0.0328, -0.0745,
    //     -0.0441, -0.0046, -0.0037, -0.0205,  0.0057,  0.0537,  0.0740, -0.0198,
    //     -0.0707, -0.0102,  0.0512,  0.0468, -0.0014,  0.0213, -0.0398,  0.0041,
    //      0.0257, -0.0380,  0.0282,  0.0212, -0.0322,  0.0038,  0.0107,  0.0469,
    //     -0.0145,  0.0275, -0.0197, -0.0234, -0.0246,  0.0764, -0.0204,  0.0172,
    //      0.0231, -0.0278, -0.0635,  0.0127, -0.0580,  0.0220,  0.0093, -0.0279,
    //      0.0148,  0.0729, -0.0043,  0.0325,  0.0617,  0.0455, -0.0015, -0.0738,
    //     -0.0006, -0.0028, -0.0383, -0.0463, -0.0276, -0.0396,  0.0590, -0.0273,
    //      0.0328, -0.0777,  0.0306, -0.0185,  0.0744, -0.0332,  0.0460, -0.0733,
    //      0.0060, -0.0252,  0.0442,  0.0033, -0.0584, -0.0434, -0.0269, -0.0245,
    //      0.0352,  0.0207, -0.0217, -0.0868, -0.0568,  0.0961, -0.0057, -0.0751,
    //      0.0372, -0.0050,  0.0040,  0.0110,  0.0996,  0.0536, -0.0023, -0.0026,
    //      0.0021, -0.0013, -0.0739, -0.0536, -0.0421,  0.0044,  0.0670,  0.0321,
    //      0.0313,  0.1022, -0.0171, -0.0547, -0.0231, -0.0237, -0.1205, -0.0221,
    //      0.0826,  0.0255, -0.0539,  0.0423,  0.0244, -0.0306,  0.0548,  0.0179,
    //      0.0453, -0.0256, -0.0722, -0.0003,  0.0330, -0.0327,  0.0102,  0.0511,
    //      0.0090, -0.0154, -0.0462, -0.0992, -0.0162, -0.0221,  0.0249,  0.0757,
    //     -0.0274,  0.0538,  0.0165, -0.0578,  0.0376,  0.0246,  0.0318, -0.0207,
    //      0.0780,  0.0406, -0.0209,  0.0079,  0.0649, -0.0197, -0.0051,  0.0232,
    //     -0.0541, -0.0722, -0.0240,  0.0532,  0.0332, -0.0294, -0.0337, -0.0898,
    //      0.0441, -0.0883,  0.0048,  0.0077,  0.0464,  0.0459, -0.0483, -0.0877,
    //      0.0006, -0.0085, -0.0325, -0.0586, -0.0196, -0.0445,  0.0185, -0.0289,
    //     -0.0133,  0.0315, -0.0135,  0.0193,  0.0224,  0.0823,  0.0306,  0.0541,
    //      0.0257, -0.0150,  0.0087,  0.0352, -0.0528, -0.0009, -0.0863, -0.0539,
    //      0.0107,  0.0107,  0.0067, -0.0379, -0.0473, -0.0238,  0.0205,  0.0616,
    //     -0.0886,  0.0352,  0.0326,  0.0693, -0.0540,  0.0188, -0.0260,  0.0122,
    //      0.0464,  0.0645, -0.0231,  0.0816,  0.0772, -0.0549, -0.0253,  0.0098,
    //      0.0339,  0.0363,  0.0237,  0.0230,  0.0069, -0.0106,  0.0276,  0.0753,
    //     -0.0338,  0.0233,  0.0178, -0.0548, -0.0488, -0.0486,  0.0569, -0.0295,
    //      0.0455,  0.0451,  0.0650,  0.0078,  0.0068,  0.0070, -0.0170, -0.0162,
    //     -0.0536,  0.0279,  0.0261, -0.0263, -0.0731, -0.0298, -0.0232,  0.0167,
    //      0.0201, -0.0476, -0.0687,  0.0640, -0.0080, -0.0290,  0.0269,  0.0349,
    //     -0.0081,  0.0243,  0.0306, -0.0376, -0.0116, -0.0094,  0.0675, -0.0561,
    //      0.0472, -0.0736,  0.0852, -0.0364, -0.0347,  0.0407,  0.0004,  0.0397,
    //      0.0364, -0.0110, -0.0297, -0.0247, -0.0550, -0.0707, -0.0165, -0.0085,
    //     -0.0214, -0.0541, -0.0268, -0.0039,  0.0225, -0.0411, -0.0032, -0.0529,
    //     -0.0543, -0.0795,  0.0042,  0.0125, -0.0283,  0.0093,  0.0245,  0.0142,
    //      0.0314, -0.0107,  0.0090,  0.0135,  0.0432,  0.0680, -0.0616,  0.0213,
    //     -0.0803,  0.0444,  0.0193, -0.0660, -0.0035, -0.1012, -0.0220, -0.0472,
    //     -0.0221,  0.0142, -0.0741, -0.0378, -0.0379, -0.0311, -0.0418, -0.0613,
    //      0.0127,  0.0522, -0.0187,  0.0918, -0.0119,  0.0291, -0.0519,  0.0178,
    //     -0.0013, -0.0517,  0.0052, -0.0652, -0.0310,  0.0642, -0.0252, -0.0279
    // };

    // Image 4 Complete
    // vector<double> query_embeddings{
    //      -1.5162e-02, -2.4455e-02, -4.7851e-02,  5.3066e-02,  4.8671e-03,
    //     -7.4760e-02, -1.2995e-02,  1.5081e-02,  2.8212e-02,  1.4364e-02,
    //      4.4384e-02,  3.9500e-02,  1.3787e-02, -7.7394e-02, -2.2747e-02,
    //      5.8785e-02, -2.9121e-02,  1.0635e-02,  4.3685e-02, -3.9258e-02,
    //      1.0360e-02, -3.3012e-02, -6.1318e-02,  7.0736e-02,  2.0295e-03,
    //     -5.1001e-03, -4.9208e-02, -2.7202e-02, -5.0762e-02, -3.2315e-02,
    //     -3.6855e-02, -4.6749e-02,  5.6427e-02, -1.0248e-01, -2.8125e-02,
    //      4.2021e-02,  1.6264e-02, -1.4913e-02, -2.2814e-03,  2.1669e-02,
    //     -4.0854e-02,  2.0549e-02,  1.7571e-02, -7.2536e-02, -2.2364e-02,
    //      9.7794e-02, -1.3884e-02,  9.9336e-02, -2.7443e-03,  3.7916e-02,
    //      6.4179e-02,  3.0800e-02, -2.5117e-02,  2.0046e-02,  5.3896e-02,
    //     -1.2976e-02,  7.7920e-02,  7.0529e-03, -5.7312e-02, -2.1989e-02,
    //     -5.7502e-02,  5.3256e-02, -2.0127e-02, -6.3425e-03, -4.8501e-02,
    //     -1.0039e-03,  2.1397e-02, -2.7725e-02,  4.0941e-02, -6.7690e-03,
    //      9.7729e-02, -3.7370e-02, -1.1097e-02,  2.8909e-02, -3.4717e-02,
    //     -6.4395e-03,  5.8646e-03,  4.8676e-02, -2.7906e-03,  8.8594e-02,
    //      4.7239e-03,  7.1509e-02, -5.4702e-03,  2.7991e-02, -4.4634e-03,
    //     -4.9101e-03,  8.5840e-02,  4.2410e-02,  6.8955e-03, -3.2751e-02,
    //     -7.6422e-02,  6.5985e-02, -1.3685e-02,  4.6769e-02, -8.4014e-03,
    //      7.4264e-02, -3.3761e-02, -3.8973e-02, -2.8301e-02,  1.1183e-01,
    //     -1.1238e-01, -5.7424e-02, -5.6877e-02, -3.2215e-02, -1.9187e-02,
    //     -4.4191e-02,  1.7658e-02,  3.0996e-02,  7.7129e-02,  2.2377e-03,
    //      8.4927e-02, -4.6043e-02, -4.2628e-02,  2.5788e-02,  3.8864e-02,
    //      4.0908e-02,  1.1147e-01, -2.9013e-02, -8.4758e-02,  3.9937e-02,
    //     -3.9731e-02, -6.2674e-02,  1.8008e-02,  5.1474e-03,  3.9294e-02,
    //      8.1307e-03, -5.7889e-02, -2.5134e-02, -4.5726e-02,  5.0147e-03,
    //      2.6784e-02, -6.1938e-02,  3.1012e-02, -4.3221e-02, -5.3534e-02,
    //      1.0911e-01, -2.0038e-03,  8.7536e-02,  5.9084e-02, -5.0533e-02,
    //      2.9729e-02, -6.9336e-02,  2.8190e-02, -1.7521e-02,  6.9142e-02,
    //     -5.7186e-04, -9.8566e-03,  5.1810e-02,  9.9682e-03, -3.9155e-02,
    //     -8.8419e-03, -4.7944e-03, -9.5112e-03,  4.0978e-03, -7.6285e-03,
    //     -4.6781e-02,  7.5689e-02,  4.4565e-02, -3.7878e-02,  4.2729e-02,
    //      7.8909e-03, -2.3252e-02,  5.4429e-03,  2.4773e-03, -1.3573e-02,
    //     -3.5857e-02, -4.1656e-02,  8.5206e-02, -5.0907e-02,  1.5986e-03,
    //     -2.1959e-02, -4.3682e-02,  6.9155e-03, -2.6814e-02,  8.9486e-03,
    //      1.9784e-02,  7.2554e-02, -9.3550e-03, -1.6573e-02,  1.4153e-03,
    //     -6.7166e-02, -4.7076e-02,  2.3712e-02, -7.5150e-03, -6.6698e-03,
    //     -4.5447e-03, -3.0079e-02, -7.8844e-03, -2.6096e-02,  3.7780e-02,
    //     -8.8046e-02,  2.1603e-02,  7.2440e-02, -1.3908e-02,  1.6411e-03,
    //      2.1961e-02,  8.2280e-02, -2.0687e-02, -2.4807e-02, -1.9878e-03,
    //     -8.7338e-03,  6.6488e-03,  8.6954e-03,  3.7389e-04, -1.1456e-03,
    //     -2.3671e-02,  1.6990e-02,  5.5432e-02, -5.8607e-02,  3.2765e-02,
    //      9.5879e-03,  4.4800e-02, -4.5228e-02, -1.9687e-02, -2.5870e-02,
    //      2.4183e-02, -2.1983e-02,  3.1177e-02,  8.8982e-03, -6.7672e-02,
    //      1.0624e-02, -1.5165e-02,  6.3054e-02, -2.5037e-05, -4.5267e-02,
    //     -5.0715e-02, -8.2785e-02,  2.2352e-02, -2.3783e-02, -1.7324e-02,
    //     -1.5990e-03, -1.4974e-03,  2.7116e-02, -2.4197e-02, -3.1161e-02,
    //      1.5256e-02, -4.3829e-02,  7.8418e-02,  2.1339e-03, -4.0275e-02,
    //     -2.5686e-02,  1.4348e-02,  4.5639e-02,  1.4677e-02,  5.5517e-02,
    //      3.4159e-02, -2.3709e-03,  1.4689e-02,  6.0342e-02, -9.9844e-03,
    //     -3.2314e-02, -2.7297e-02,  4.7269e-02,  7.5504e-02,  3.1320e-02,
    //      3.4844e-02, -4.1919e-02,  6.1893e-04,  1.2139e-02,  5.2982e-02,
    //     -3.1196e-02,  5.0649e-03, -2.6932e-02, -5.9584e-02, -3.7685e-02,
    //     -4.0179e-02,  1.0750e-02,  2.1815e-02, -1.7697e-02,  7.3123e-02,
    //     -1.1019e-01, -5.0896e-02, -5.3025e-02, -6.8564e-02, -1.0146e-02,
    //     -1.5950e-02,  1.7746e-02, -1.0348e-02,  3.1095e-02,  5.9448e-02,
    //     -4.7496e-02,  1.0779e-02, -5.1970e-02, -4.9927e-02,  4.0057e-02,
    //      7.5737e-02,  2.7436e-02,  2.3954e-02, -5.1912e-02, -3.1619e-02,
    //      6.5575e-02, -1.8077e-02,  6.7151e-02,  5.0480e-02, -1.6348e-02,
    //      2.4756e-02,  6.9193e-02,  2.0909e-02,  2.4500e-02,  1.9885e-02,
    //     -5.2869e-02, -9.9618e-03,  3.7340e-02,  6.2930e-03, -1.9173e-02,
    //      1.6845e-03, -3.2213e-02, -3.8879e-02,  1.0852e-02, -1.1212e-01,
    //      1.7548e-02,  1.1289e-02,  2.4534e-02,  2.7727e-02, -2.0074e-02,
    //      6.7447e-02,  5.1478e-02, -8.9649e-02,  9.7847e-03,  4.4934e-03,
    //      3.5172e-02,  7.1031e-02,  6.2998e-03,  2.9093e-02,  1.7622e-02,
    //      3.0820e-02, -2.1525e-03,  2.0501e-02, -1.3867e-02,  3.0501e-02,
    //      2.9591e-02,  8.2577e-02,  1.7775e-02,  3.7953e-02,  3.2103e-02,
    //     -6.2365e-03,  3.9031e-03,  3.8127e-02, -4.7222e-02,  2.5468e-02,
    //      4.3646e-02, -2.2887e-02, -1.5299e-02, -7.0708e-03,  4.9027e-02,
    //     -9.9023e-02,  1.2237e-02,  7.1511e-02,  8.5879e-02, -1.2751e-02,
    //      1.5672e-02,  7.6299e-02, -1.0117e-01,  3.8521e-02, -3.0242e-02,
    //      3.0260e-02, -6.4576e-03,  5.4223e-03,  7.2661e-02,  3.6142e-03,
    //      8.2036e-02,  9.9491e-02,  3.3948e-02, -3.2621e-02, -5.5678e-02,
    //      3.3715e-02, -1.9609e-02,  5.6299e-04, -6.8921e-03, -5.2633e-02,
    //      2.3144e-02, -4.1103e-02, -1.0156e-02, -4.1398e-02,  1.5778e-02,
    //      6.5156e-02, -4.1514e-02, -1.0168e-03,  7.0636e-04, -2.8165e-03,
    //      1.7848e-02,  7.3313e-02,  1.0509e-02,  1.3295e-01,  1.2610e-02,
    //     -9.5936e-02, -6.6643e-02, -8.2138e-02, -5.9293e-02, -1.1541e-02,
    //      3.2162e-02, -1.0280e-01,  2.4284e-02, -8.1434e-02, -1.9569e-02,
    //     -3.6801e-02, -4.0779e-03, -6.3972e-02,  3.3827e-02,  5.4104e-02,
    //     -1.4166e-02, -3.7419e-02, -7.0238e-02, -1.1706e-02,  7.7979e-03,
    //      3.1886e-02,  6.5987e-02,  2.1877e-02,  3.4764e-02, -1.9500e-02,
    //      1.9748e-02, -1.2836e-02,  3.5379e-02, -8.1718e-02, -2.9982e-02,
    //      7.9083e-02,  4.0967e-02,  9.9153e-02, -3.9327e-02,  9.1349e-02,
    //      1.0833e-02, -5.2819e-02, -6.9015e-02, -2.2007e-02, -4.8997e-02,
    //      2.8240e-02,  3.2306e-02,  2.7313e-02,  8.2748e-02, -4.4278e-03,
    //      2.6513e-02,  5.4279e-02,  4.0877e-02, -2.2520e-03, -8.6933e-02,
    //     -5.0082e-03, -6.4115e-02, -4.6134e-02, -6.1550e-02,  3.4410e-02,
    //      5.7104e-02,  1.9503e-02, -4.5221e-02,  6.6312e-02, -2.8158e-02,
    //     -4.8461e-03, -1.5810e-02,  3.5408e-02, -6.9494e-02, -2.6733e-02,
    //     -3.5723e-02,  8.7814e-03, -2.0373e-02, -1.2233e-02, -2.9318e-02,
    //     -5.3080e-02,  5.0237e-02, -3.8963e-02, -1.2504e-02,  2.4615e-02,
    //     -6.1957e-02, -4.3861e-02, -2.9488e-02,  1.8380e-02,  8.4814e-03,
    //      2.8970e-02, -1.3872e-02,  5.4029e-02, -5.7758e-02,  1.4871e-02,
    //      3.9503e-02,  3.6222e-02, -7.4749e-03, -2.9198e-02, -6.6493e-02,
    //     -1.9461e-02, -5.3908e-02,  3.3603e-02,  3.0522e-02,  4.2848e-02,
    //     -8.0393e-02, -9.8223e-02,  3.9611e-02, -4.7408e-03, -2.4030e-02,
    //      5.8254e-03, -5.9612e-03,  3.0517e-02,  1.9836e-02, -2.2876e-02,
    //      1.8204e-02,  2.2606e-02,  8.9194e-03,  9.6229e-03,  3.6918e-02,
    //     -3.1756e-02,  1.5481e-02,  1.4319e-02, -1.0852e-01, -8.7238e-02,
    //      1.8985e-02,  2.5272e-02, -4.1781e-02,  1.3824e-02,  4.4438e-02,
    //      1.0260e-02, -4.5201e-02,  3.8690e-02,  8.8674e-03, -3.9508e-02,
    //      1.0655e-02, -4.8160e-02
    // };

    // Image 5 Complete
    // vector<double> query_embeddings{
    //      -1.1650e-03,  4.8380e-02, -8.3359e-02, -4.4887e-04,  2.8497e-03,
    //     -9.8288e-02,  1.0600e-01, -1.8360e-02,  2.2751e-02,  9.2352e-03,
    //     -3.9532e-02, -1.5017e-02,  1.3193e-02, -2.7355e-02, -5.7178e-02,
    //     -1.1909e-02,  3.1703e-02, -9.1844e-03,  8.1413e-02,  4.7692e-02,
    //      3.4323e-02, -7.6238e-02, -5.9172e-02, -1.3869e-02,  9.2449e-02,
    //     -5.7140e-02,  7.0750e-02, -7.4676e-02,  4.1101e-02,  4.8691e-02,
    //      5.9239e-02, -1.2712e-02, -2.9334e-02,  6.5219e-02,  3.5236e-03,
    //     -4.3706e-02, -7.2096e-02,  4.1067e-02, -6.6003e-03,  8.3670e-02,
    //     -1.0590e-01, -5.9918e-02, -4.0581e-02,  4.9425e-02, -8.8990e-02,
    //     -1.0011e-03, -5.4959e-02, -7.4356e-03,  4.5054e-02,  3.2202e-02,
    //      3.0206e-02, -5.9675e-02,  2.8837e-02,  5.9901e-02, -3.6180e-02,
    //     -6.6635e-02,  5.8636e-03,  5.9132e-02, -7.0504e-02, -1.5477e-02,
    //      7.2470e-03, -1.6968e-02,  2.8109e-02,  1.3723e-02,  5.1939e-03,
    //     -4.1051e-02, -2.6083e-02, -3.3863e-02, -4.2456e-02, -5.3103e-02,
    //     -5.7382e-02, -4.4133e-02, -4.6233e-02, -8.5657e-03, -4.0553e-02,
    //      1.6618e-02, -1.5118e-03, -1.2098e-02,  7.0393e-02,  5.0283e-02,
    //     -7.2724e-02, -4.6194e-02,  1.7555e-02, -5.6638e-02, -6.4076e-03,
    //      3.0222e-02, -4.6502e-02, -5.6525e-03,  2.8591e-02,  3.6614e-02,
    //     -3.3630e-03, -2.2298e-02, -6.9893e-02, -3.4752e-02,  8.8244e-02,
    //     -4.4805e-02,  4.6455e-02, -8.6172e-03, -5.6197e-02,  5.0459e-02,
    //     -1.8782e-02, -7.1440e-03,  4.6280e-02, -2.2092e-02,  3.8688e-02,
    //      6.2326e-03, -3.7585e-02,  6.9446e-02,  5.2193e-02, -6.6969e-03,
    //      1.0826e-02, -3.7768e-02,  4.0280e-02, -9.4551e-02, -2.6654e-02,
    //     -1.3458e-02, -2.1839e-02,  3.1942e-02, -4.6158e-02,  9.6599e-03,
    //      8.4838e-03,  5.7074e-02,  3.4942e-03,  5.6081e-02, -5.2048e-02,
    //     -4.1978e-02, -1.7665e-02, -6.4996e-02, -2.1837e-02,  6.4161e-02,
    //     -3.0660e-02,  8.3782e-02,  5.3948e-02, -3.9933e-02,  7.3271e-02,
    //     -3.5266e-02,  4.6534e-02,  3.2735e-05, -8.2662e-03,  1.8427e-02,
    //      3.3274e-02, -3.7126e-03, -5.8836e-02,  3.7864e-03, -4.6945e-02,
    //      6.8925e-02,  2.6274e-02,  2.5120e-02,  3.0214e-03, -2.0903e-02,
    //      1.6363e-02,  6.3561e-02,  1.4341e-02,  3.2894e-02, -7.9924e-03,
    //      1.9185e-02,  1.7912e-02,  8.6259e-02,  2.9717e-02,  6.9094e-02,
    //      3.2310e-02,  5.3776e-02,  5.7514e-02,  1.5460e-02, -2.7230e-02,
    //      6.4998e-02, -1.1587e-02,  4.7727e-03,  2.2436e-02,  1.7007e-02,
    //     -4.5466e-03, -2.0410e-02,  7.8262e-02,  8.5268e-04, -2.8760e-02,
    //     -9.6133e-03, -9.1603e-02, -1.0328e-01,  2.8270e-02, -8.0398e-02,
    //      1.3057e-02,  1.2937e-02, -1.9826e-02,  5.0940e-02, -5.7271e-03,
    //      8.8880e-02,  6.7203e-02, -9.8559e-03, -6.7301e-02,  4.5643e-02,
    //     -6.5115e-02, -7.7918e-03, -2.0632e-02, -9.9627e-03, -2.4752e-02,
    //     -2.1597e-02, -3.5699e-02,  1.0343e-02,  6.9049e-02, -3.6321e-02,
    //      1.0231e-02, -5.8941e-02, -1.8548e-02,  3.3645e-02,  9.5472e-02,
    //     -8.9147e-03,  2.2013e-02, -1.2271e-02, -1.4979e-02, -3.9780e-02,
    //     -7.8099e-02, -4.3402e-02, -1.0226e-02, -2.7180e-02,  9.2525e-03,
    //     -2.0316e-02,  4.6826e-02,  2.7499e-02,  6.0659e-02,  4.9299e-02,
    //     -2.0008e-02, -3.3838e-02,  1.6017e-02, -1.4782e-03,  2.0442e-02,
    //     -2.2528e-02,  6.3292e-02,  1.1084e-02, -7.0781e-02, -1.5710e-02,
    //     -3.3524e-02,  3.8025e-02,  5.1119e-04, -1.6006e-02, -1.2173e-02,
    //      1.8448e-02, -8.0427e-03, -2.6502e-02, -1.1346e-02, -6.1496e-02,
    //      9.7386e-03, -4.7637e-02, -8.2400e-02,  3.9937e-03,  2.9446e-02,
    //      3.3979e-02, -2.8573e-02, -2.3128e-02, -9.0688e-03, -3.7038e-02,
    //     -1.6074e-02,  5.0564e-02,  7.4568e-02,  7.7127e-04, -8.3611e-02,
    //      6.4465e-03,  3.3283e-02, -8.4670e-03, -6.6646e-03,  8.1968e-05,
    //      2.3909e-02,  3.6689e-02, -4.3447e-02,  7.1690e-02,  2.5475e-02,
    //      1.8583e-02, -2.2956e-02, -8.4746e-03, -2.9254e-02, -2.2380e-03,
    //     -4.6248e-03, -1.9660e-02, -6.2105e-02,  6.5287e-02, -4.7288e-02,
    //      1.0190e-01,  3.5552e-02,  3.9949e-03, -5.5064e-02, -2.3602e-02,
    //     -2.4193e-02,  9.1152e-03,  2.2684e-02,  1.0086e-01, -2.2769e-02,
    //     -7.9088e-02, -8.6892e-03, -4.8246e-02, -3.9869e-02,  5.5926e-02,
    //     -3.6593e-02, -6.2835e-02,  2.2312e-02, -7.5611e-02,  9.5841e-03,
    //     -2.8728e-02, -2.7232e-02,  2.9503e-02,  6.2275e-02,  3.6336e-02,
    //      1.8101e-03,  7.7166e-03, -5.6615e-02, -2.8462e-02, -4.1596e-02,
    //      3.5804e-03,  3.8491e-05,  2.2829e-02,  3.2734e-02, -1.7393e-02,
    //     -5.5648e-02,  4.8726e-03,  3.5559e-02, -5.9147e-02, -2.1605e-02,
    //     -3.4821e-02,  5.2303e-03, -1.8607e-02,  2.3785e-02, -5.1236e-02,
    //     -4.4885e-02,  2.6303e-02, -1.7419e-02,  2.0611e-03, -4.1957e-02,
    //      6.5992e-02, -3.1964e-02, -1.3011e-02, -3.8776e-02,  1.9908e-02,
    //     -2.0203e-02,  9.2465e-02, -5.2967e-02,  1.7954e-02, -3.8992e-02,
    //     -1.5238e-02, -1.0755e-02, -4.8071e-02,  2.6977e-02,  3.6722e-02,
    //     -1.0939e-02, -2.5620e-03, -5.9798e-03, -4.9725e-02, -1.8785e-02,
    //      4.6572e-03, -2.7678e-02, -2.5753e-02, -3.0089e-02, -3.8659e-02,
    //     -4.6564e-02,  1.0533e-01,  4.9069e-02, -1.1540e-01,  2.3789e-03,
    //     -2.8202e-02,  5.4586e-02,  8.0578e-02, -1.1144e-02, -7.0276e-02,
    //     -4.9570e-03, -3.6675e-02, -1.2107e-02, -2.8582e-02,  9.7416e-02,
    //     -2.2378e-02,  1.2424e-02, -9.1051e-03, -5.3968e-03, -7.3951e-03,
    //     -7.2000e-02,  1.8694e-03,  2.9874e-02,  6.3802e-02,  2.0895e-02,
    //     -8.1741e-02, -1.8505e-02,  3.6595e-02, -1.0019e-01, -2.0363e-02,
    //      4.4070e-02,  1.2177e-02, -4.0476e-02, -5.1599e-02, -4.3073e-02,
    //     -6.6915e-03, -3.0146e-02,  8.1246e-02, -1.5623e-02,  9.1218e-02,
    //     -7.7777e-03,  1.5341e-02, -4.7191e-02,  9.0363e-02, -1.2232e-02,
    //     -6.5433e-02, -5.3225e-02,  5.2914e-02,  2.2027e-02, -7.3820e-02,
    //      3.0970e-02, -1.9606e-02,  2.2182e-02, -1.4945e-02, -8.8142e-03,
    //      4.3373e-02, -5.8562e-03,  1.8260e-02, -5.5339e-02, -7.5177e-02,
    //     -6.3618e-02,  8.9659e-03, -1.2529e-01, -4.4580e-02, -6.3754e-02,
    //      6.4701e-03, -4.6891e-03, -3.2128e-02, -3.5187e-02, -1.1598e-02,
    //      3.6972e-02,  6.2068e-02,  2.5797e-02,  1.1750e-01,  1.0916e-02,
    //      4.8293e-02, -8.5950e-04,  5.8500e-03,  6.1462e-02,  7.6397e-02,
    //     -4.8949e-02, -8.1036e-02,  9.8079e-03,  4.7789e-03,  3.7069e-02,
    //     -8.7635e-03, -8.5192e-02, -6.0445e-02,  1.4755e-02,  3.9498e-03,
    //     -1.6425e-02, -1.3678e-02,  6.5455e-02,  5.6480e-02,  1.1484e-02,
    //      4.1217e-02,  3.8501e-02, -1.5309e-02,  1.0839e-02, -1.5183e-02,
    //      2.3734e-02, -2.4084e-03, -4.5636e-02, -4.9008e-02, -6.5829e-03,
    //      9.5585e-03, -1.9936e-02,  6.0444e-02,  6.3058e-02,  4.6051e-03,
    //      7.6366e-02,  8.0809e-02,  3.0403e-02,  3.2995e-02, -3.9300e-02,
    //      7.3564e-02, -5.4317e-03, -7.5088e-04,  5.4555e-02, -2.2185e-02,
    //      1.0416e-02, -4.9345e-02, -1.8917e-02,  2.5592e-02, -1.0927e-02,
    //      4.1252e-02, -2.2992e-02,  1.8316e-02,  2.8394e-03, -4.1077e-02,
    //      1.8051e-02, -3.8722e-02,  2.4577e-02,  7.1892e-03,  4.8128e-02,
    //      1.1179e-02, -4.1145e-03,  8.0031e-02, -9.4617e-03, -9.4528e-03,
    //      4.0487e-02, -1.3208e-02, -1.6062e-02,  2.7731e-02,  3.9027e-02,
    //      8.9577e-02, -2.0598e-02,  4.1423e-02,  7.6110e-02, -2.3890e-02,
    //      4.0222e-02, -8.4844e-02,  8.7236e-02,  4.3396e-02,  1.2680e-02,
    //      6.9184e-02,  5.1323e-02,  2.9775e-02, -3.3904e-02, -4.8150e-02,
    //      1.1353e-02,  2.8513e-02
    // };

    // Image 6
    vector<double> query_embeddings{
         -0.0213,  0.0297, -0.0732, -0.0134,  0.0026, -0.0400,  0.0718, -0.0191,
         0.0379, -0.0139, -0.0373, -0.0213,  0.0539, -0.0022, -0.0696, -0.0067,
         0.0106,  0.0036,  0.1207,  0.0146,  0.0237, -0.0888, -0.0605, -0.0163,
         0.0700, -0.0404,  0.0606, -0.0423,  0.0235,  0.0534,  0.0730, -0.0379,
         0.0028,  0.0296, -0.0016, -0.0280, -0.0583,  0.0972,  0.0015,  0.0665,
        -0.1151, -0.0385, -0.0304,  0.0402, -0.0528, -0.0330, -0.0865,  0.0010,
         0.0047, -0.0048, -0.0261, -0.0225, -0.0027,  0.0513, -0.0507, -0.0325,
         0.0396,  0.0484, -0.0336, -0.0299,  0.0674, -0.0412,  0.0586,  0.0065,
        -0.0139, -0.0192,  0.0104, -0.0780, -0.0783,  0.0037, -0.0763, -0.0971,
        -0.0141, -0.0191, -0.0476,  0.0263, -0.0090,  0.0091,  0.0782,  0.0186,
        -0.0683,  0.0008,  0.0228, -0.0346, -0.0030,  0.0299, -0.0258,  0.0345,
        -0.0188, -0.0094, -0.0269, -0.0724, -0.0582, -0.0093,  0.0819, -0.0455,
         0.0496, -0.0342, -0.0095,  0.0456,  0.0004, -0.0541,  0.0138, -0.0328,
         0.0112,  0.0080, -0.0587,  0.0640,  0.0601, -0.0151, -0.0337,  0.0121,
        -0.0128, -0.1057,  0.0294,  0.0178, -0.0125,  0.0417, -0.0103, -0.0012,
        -0.0244,  0.0028, -0.0035,  0.0696, -0.0453, -0.0471, -0.0391, -0.0220,
        -0.0563,  0.0900, -0.0374,  0.0600,  0.0691, -0.0417,  0.0666, -0.0219,
         0.0796,  0.0097, -0.0031, -0.0364,  0.0326, -0.0131, -0.0241,  0.0227,
        -0.0374,  0.0295,  0.0557,  0.0462, -0.0399, -0.0053, -0.0109,  0.0560,
         0.0339,  0.0111,  0.0023,  0.0052,  0.0176,  0.0657,  0.0785,  0.0355,
         0.0074,  0.0725,  0.0796,  0.0203, -0.0189,  0.0604, -0.0193, -0.0142,
         0.0529,  0.0489,  0.0452, -0.0186,  0.0991, -0.0104, -0.0499, -0.0397,
        -0.0715, -0.1008,  0.0095, -0.0673,  0.0179,  0.0095, -0.0264,  0.0371,
         0.0150,  0.0800,  0.0398,  0.0184, -0.0404, -0.0162, -0.0789,  0.0077,
        -0.0268, -0.0171, -0.0200, -0.0290,  0.0130,  0.0070,  0.0642, -0.0195,
         0.0251, -0.0439, -0.0122,  0.0142,  0.0406,  0.0226, -0.0130, -0.0296,
         0.0063, -0.0595, -0.0579, -0.0452, -0.0172, -0.0176,  0.0460, -0.0360,
         0.0460,  0.0371,  0.0758,  0.0390, -0.0109, -0.0294,  0.0022, -0.0047,
         0.0081, -0.0667,  0.0590, -0.0327, -0.1006, -0.0676, -0.0330,  0.0779,
         0.0214, -0.0050, -0.0115,  0.0457,  0.0647, -0.0537, -0.0261, -0.0819,
         0.0212, -0.0195, -0.0723,  0.0026, -0.0370,  0.0227, -0.0162, -0.0391,
        -0.0682,  0.0080, -0.0264,  0.0067,  0.0680,  0.0445, -0.0574,  0.0261,
        -0.0033, -0.0140,  0.0067,  0.0082,  0.0141,  0.0189, -0.0291,  0.0740,
        -0.0152,  0.0402,  0.0387, -0.0261, -0.0453, -0.0007,  0.0350, -0.0009,
        -0.0909,  0.0459, -0.0369,  0.0736,  0.0640, -0.0023, -0.0199, -0.0370,
        -0.0036, -0.0266,  0.0338,  0.0837,  0.0158, -0.0442,  0.0197, -0.0402,
        -0.0258,  0.0104,  0.0330, -0.0497,  0.0110, -0.0330,  0.0075, -0.0204,
        -0.0122,  0.0676,  0.1252,  0.0408,  0.0139,  0.0281, -0.0489, -0.0295,
        -0.0690,  0.0374, -0.0124,  0.0433,  0.0252, -0.0037, -0.0635, -0.0204,
         0.0537, -0.0615, -0.0704, -0.0066,  0.0278, -0.0509, -0.0072, -0.0423,
        -0.0598,  0.0198, -0.0445, -0.0400, -0.0980,  0.0836, -0.0224, -0.0375,
        -0.0101,  0.0115,  0.0023,  0.0543, -0.0477, -0.0192, -0.0419, -0.0047,
        -0.0148, -0.0405,  0.0165,  0.0125, -0.0280, -0.0031,  0.0031, -0.0211,
        -0.0649, -0.0102, -0.0612, -0.0426, -0.0258, -0.0142, -0.0614,  0.0888,
         0.0392, -0.0679, -0.0215, -0.0507,  0.0725,  0.0592, -0.0197, -0.0370,
        -0.0220,  0.0115, -0.0045, -0.0155,  0.0634,  0.0036,  0.0439,  0.0271,
         0.0154, -0.0036, -0.0380,  0.0483,  0.0140,  0.0942,  0.0214, -0.1210,
        -0.0035,  0.0004, -0.0630, -0.0537,  0.0765,  0.0112, -0.0178, -0.0523,
        -0.0315, -0.0369, -0.0055,  0.0132, -0.0198,  0.0820,  0.0347,  0.0001,
        -0.0013,  0.0627, -0.0383, -0.0190, -0.0404,  0.0557,  0.0141, -0.0717,
         0.0376, -0.0155,  0.0041, -0.0067,  0.0270,  0.0827, -0.0256,  0.0284,
        -0.0407, -0.0652, -0.0523,  0.0369, -0.0945, -0.0426, -0.0317,  0.0276,
        -0.0101, -0.0350, -0.0511,  0.0400,  0.0314,  0.0196,  0.0508,  0.0888,
        -0.0190,  0.0692,  0.0004,  0.0042,  0.0445,  0.0979, -0.0423, -0.0770,
        -0.0180,  0.0151,  0.0364,  0.0296, -0.0894, -0.0610,  0.0316,  0.0317,
         0.0259, -0.0055,  0.0472,  0.0603,  0.0412,  0.0091, -0.0185, -0.0114,
        -0.0098,  0.0209,  0.0195,  0.0208, -0.0774, -0.0504,  0.0012, -0.0097,
        -0.0433,  0.0315,  0.0436,  0.0151,  0.0466,  0.0917,  0.0502,  0.0633,
        -0.0217,  0.0613, -0.0100,  0.0494,  0.0032, -0.0058, -0.0285, -0.0841,
        -0.0286,  0.0201,  0.0035,  0.0350, -0.0307,  0.0029,  0.0117, -0.0500,
         0.0063, -0.0905,  0.0054, -0.0071,  0.0491,  0.0629, -0.0085,  0.0769,
        -0.0122,  0.0181,  0.0640,  0.0186,  0.0005,  0.0532,  0.0129,  0.0883,
         0.0017, -0.0018,  0.0393, -0.0443,  0.0496, -0.0285,  0.0585,  0.0300,
        -0.0123,  0.0551,  0.0726, -0.0188, -0.0515, -0.0129, -0.0069,  0.0620
    };

    long logq = 800; ///< Ciphertext Modulus
	long logp = 30; ///< Real message will be quantized by multiplying 2^40
	long logn = 9; ///< log2(The number of slots)

	srand(time(NULL));
	SetNumThreads(8);
	TimeUtils timeutils;
	Ring ring;
	SecretKey secretKey(ring);
	Scheme scheme(secretKey, ring);
	SchemeAlgo algo(scheme);
    scheme.addLeftRotKey(secretKey, 2);
    scheme.addLeftRotKey(secretKey, 1);
    long n = 1 << logn;

    // Ciphertext embeddings_cipher;

    // scheme.encrypt(embeddings_cipher, embeddings, n, logp, logq);
    // absolute min/max values of the coefficients range 
    timeutils.start("Begin P");
    long C_range = 50;
    long m = 4;   
    long overlap = 0;
    long step_size = m - overlap;
    vector<long> C = generate_C(C_range, m);
    vector<long> E = generate_E(m);
    long remainder = n % step_size;
    long padding;
    if (remainder > 0) {
        padding = (step_size - remainder) % step_size;
    }
    else {
        padding = 0;
    }

    query_embeddings.resize(query_embeddings.size() + padding, 0.0);
    reference_embeddings.resize(reference_embeddings.size() + padding, 0.0);

    complex<double>* query_embeddings_new = new complex<double>[query_embeddings.size()];
    for (long i = 0; i < query_embeddings.size(); i++) {
        query_embeddings_new[i] = complex<double>(query_embeddings[i], 0.0);
    }
    complex<double>* reference_embeddings_new = new complex<double>[reference_embeddings.size()];
    for (long i = 0; i < reference_embeddings.size(); i++) {
        reference_embeddings_new[i] = complex<double>(reference_embeddings[i], 0.0);
    }

    // cout << "Resizing done" << endl;
    vector<Ciphertext> query_embeddings_ciphers;
    for (long i = 0; i < query_embeddings.size(); i+= step_size) {
        Ciphertext word_cipher;
        complex<double>* word_array = new complex<double>[m];
        for (long j = 0; j < m; j++){
            word_array[j] = query_embeddings_new[i+j];
        }
        scheme.encrypt(word_cipher, word_array, m, logp, logq);
        query_embeddings_ciphers.push_back(word_cipher);
        word_cipher.free();
    }
    vector<Ciphertext> reference_embeddings_ciphers;
    for (long i = 0; i < reference_embeddings.size(); i+= step_size) {
        Ciphertext word_cipher;
        complex<double>* word_array = new complex<double>[m];
        for (long j = 0; j < m; j++){
            word_array[j] = reference_embeddings_new[i+j];
        }
        scheme.encrypt(word_cipher, word_array, m, logp, logq);
        reference_embeddings_ciphers.push_back(word_cipher);
        word_cipher.free();
    }

    cout << "Starting query P" << endl;
    vector<Ciphertext> query_P;

    for (auto i : query_embeddings_ciphers) {
        complex<double>* v0 = new complex<double>[m];
        for (long i = 0; i < m; i++) {
            v0[i] = complex<double>(0.0,0.0);
        }
        Ciphertext temp_p;
        scheme.encrypt(temp_p, v0, m ,logp, logq);

        for (long j = 0; j < m; j++) {
            complex<double>* temp = new complex<double>[m];
            for (long k = 0; k < m; k++) {
                temp[k] = complex<double>(0.0,0.0);
            }
            temp[j] = complex<double>(1.0, 0.0);
            
            Ciphertext temp_word, res;
            scheme.encrypt(temp_word, temp, m, logp, logq);
            scheme.multAndEqual(temp_word, i);
            algo.power(res, temp_word, logp, E[j]);
            scheme.multByConstAndEqual(res, C[j], logp);
            scheme.reScaleByAndEqual(res, res.logp - logp);
            if (temp_p.logq > res.logq) {
                scheme.modDownToAndEqual(temp_p, res.logq);
            }
            else if (temp_p.logq < res.logq){
                scheme.modDownToAndEqual(res, temp_p.logq);
            }
            scheme.addAndEqual(temp_p, res);          

            temp_word.free();
            res.free();
            delete[] temp;
            // break;
        }

        Ciphertext temp_sum_cipher;
        for (long j = m/2; j > 0; j/=2){
            temp_sum_cipher.copy(temp_p);
            temp_sum_cipher.logp = temp_p.logp;
            temp_sum_cipher.logq = temp_p.logq;
            scheme.leftRotateFastAndEqual(temp_sum_cipher, j);
            scheme.addAndEqual(temp_p, temp_sum_cipher);
        }

        // complex<double>* true_val = new complex<double>[m];
        // for (long k = 0; k < m; k++) {
        //     true_val[k] = complex<double>(0.0,0.0);
        // }
        // double true_temp = 0.0;
        // for (long k = 0; k < m; k++) {
        //     true_temp += C[k]*pow(embeddings[k], E[k]);
        // }
        // true_val[0] = complex<double>(true_temp, 0.0);

        // complex<double>* decrypt_p = scheme.decrypt(secretKey, temp_p);

        // StringUtils::compare(true_val, decrypt_p, m, "P");
        // break;

        query_P.push_back(temp_p);
        temp_sum_cipher.free();
        delete[] v0;        
    }
    cout << "Query P complete" << endl;

    cout << "Starting reference P" << endl;
    vector<Ciphertext> reference_P;

    for (auto i : reference_embeddings_ciphers) {
        complex<double>* v0 = new complex<double>[m];
        for (long i = 0; i < m; i++) {
            v0[i] = complex<double>(0.0,0.0);
        }
        Ciphertext temp_p;
        scheme.encrypt(temp_p, v0, m ,logp, logq);

        for (long j = 0; j < m; j++) {
            complex<double>* temp = new complex<double>[m];
            for (long k = 0; k < m; k++) {
                temp[k] = complex<double>(0.0,0.0);
            }
            temp[j] = complex<double>(1.0, 0.0);
            
            Ciphertext temp_word, res;
            scheme.encrypt(temp_word, temp, m, logp, logq);
            scheme.multAndEqual(temp_word, i);
            algo.power(res, temp_word, logp, E[j]);
            scheme.multByConstAndEqual(res, C[j], logp);
            scheme.reScaleByAndEqual(res, res.logp - logp);
            if (temp_p.logq > res.logq) {
                scheme.modDownToAndEqual(temp_p, res.logq);
            }
            else if (temp_p.logq < res.logq){
                scheme.modDownToAndEqual(res, temp_p.logq);
            }
            scheme.addAndEqual(temp_p, res);          

            temp_word.free();
            res.free();
            delete[] temp;
            // break;
        }

        Ciphertext temp_sum_cipher;
        for (long j = m/2; j > 0; j/=2){
            temp_sum_cipher.copy(temp_p);
            temp_sum_cipher.logp = temp_p.logp;
            temp_sum_cipher.logq = temp_p.logq;
            scheme.leftRotateFastAndEqual(temp_sum_cipher, j);
            scheme.addAndEqual(temp_p, temp_sum_cipher);
        }

        // complex<double>* true_val = new complex<double>[m];
        // for (long k = 0; k < m; k++) {
        //     true_val[k] = complex<double>(0.0,0.0);
        // }
        // double true_temp = 0.0;
        // for (long k = 0; k < m; k++) {
        //     true_temp += C[k]*pow(embeddings[k], E[k]);
        // }
        // true_val[0] = complex<double>(true_temp, 0.0);

        // complex<double>* decrypt_p = scheme.decrypt(secretKey, temp_p);

        // StringUtils::compare(true_val, decrypt_p, m, "P");
        // break;

        reference_P.push_back(temp_p);
        temp_sum_cipher.free();
        delete[] v0;        
    }
    cout << "Query P complete" << endl;

    // Calculating Squared Euclidian distance

    if (reference_P.size() != query_P.size()){
        cout << "Error, P sizes unequal" << endl;
    }


    // Assuming P size is a power of 2
    Ciphertext sed;
    
    vector<Ciphertext> query_P_sq, reference_P_sq;
    for (long i = 0; i < reference_P.size(); i++) {
        Ciphertext query_sq;
        algo.powerOf2(query_sq, query_P[i], logp, 1);
        query_P_sq.push_back(query_sq);
        query_sq.free();

        Ciphertext reference_sq;
        algo.powerOf2(reference_sq, reference_P[i], logp, 1);
        reference_P_sq.push_back(reference_sq);
        reference_sq.free();
    }

    for (long i = 0; i < reference_P_sq.size(); i++) {
        scheme.multByConstAndEqual(query_P_sq[i], (double)-1, logp);
        scheme.reScaleByAndEqual(query_P_sq[i], abs(query_P_sq[i].logp - reference_P_sq[i].logp));
        scheme.modDownToAndEqual(reference_P_sq[i], query_P_sq[i].logq);
        scheme.addAndEqual(reference_P_sq[i], query_P_sq[i]);
    }

    sed.copy(reference_P_sq[0]);
    sed.logp = reference_P_sq[0].logp;
    sed.logq = reference_P_sq[0].logq;
    for (long i = 1; i < reference_P_sq.size(); i++) {
        scheme.addAndEqual(sed, reference_P_sq[i]);
    }

    complex<double>* true_val = new complex<double>[4];
    
    double true_val_temp = 0.0;
    for (int i = 0; i < 1; i += m) {
        double true_query_P = 0.0;
        for (long k = i; k < i + m; k++) {
            true_query_P += C[k%m]*pow(query_embeddings[k], E[k%m]);
        }

        double true_reference_P = 0.0;
        for (long k = i; k < i + m; k++) {
            true_reference_P += C[k%m]*pow(reference_embeddings[k], E[k%m]);
            // true_val[k] = complex<double>(C[k%m]*pow(reference_embeddings[k], E[k%m]), 0.0);
        }

        // true_val_temp += true_reference_P;
        true_val_temp += pow(true_reference_P,2) - pow(true_query_P, 2);
        // true_val[i] = complex<double>(true_val_temp, 0.0);
        
    }
    true_val[0] = complex<double>(true_val_temp, 0.0);
    true_val[1] = complex<double>(true_val_temp, 0.0);
    true_val[2] = complex<double>(true_val_temp, 0.0);
    true_val[3] = complex<double>(true_val_temp, 0.0);

    complex<double>* decrypt_p = scheme.decrypt(secretKey, reference_P[0]);

    StringUtils::compare(true_val, decrypt_p, 4, "SED");

    timeutils.stop("End P");
    
}